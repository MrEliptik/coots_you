[gd_scene load_steps=16 format=2]

[ext_resource path="res://scenes/game/scripts/game.gd" type="Script" id=1]
[ext_resource path="res://scenes/spawner/spawn_manager.tscn" type="PackedScene" id=2]
[ext_resource path="res://scenes/player/player.tscn" type="PackedScene" id=3]
[ext_resource path="res://scenes/ui/fonts/aldo_the_apache/AldotheApache.ttf" type="DynamicFontData" id=4]
[ext_resource path="res://scenes/ui/tutorial/tutorial.tscn" type="PackedScene" id=5]
[ext_resource path="res://scenes/game/visuals/walls.png" type="Texture" id=6]
[ext_resource path="res://scenes/game/scripts/wave.gd" type="Script" id=7]
[ext_resource path="res://scenes/game/scripts/camera.gd" type="Script" id=8]

[sub_resource type="Shader" id=4]
code = "shader_type canvas_item;

//uniform vec3 color_replace = vec3(1.0,1.0,0.0);
uniform int OCTAVE = 12;
uniform float timescale = 5.0;
uniform vec4 CLOUD1_COL: hint_color = vec4(0.41,0.64,0.78,0.4);
uniform vec4 CLOUD2_COL: hint_color = vec4(0.99,0.79,0.46,0.2);
uniform vec4 CLOUD3_COL: hint_color = vec4(0.81,0.31,0.59,1.0);
uniform vec4 CLOUD4_COL: hint_color = vec4(0.27,0.15,0.33,1.0);
uniform vec4 SPACE: hint_color = vec4(0.09,0.06,0.28,0.3);
uniform float zoomScale = 6.0;
uniform float size = 10.0;
uniform float starscale = 20.0;
uniform float prob: hint_range(0.0,1.0) = 0.98;

float rand(vec2 input){
	return fract(sin(dot(input,vec2(23.53,44.0)))*42350.45);
}

float perlin(vec2 input){
	vec2 i = floor(input);
	vec2 j = fract(input);
	vec2 coord = smoothstep(0.,1.,j);
	
	float a = rand(i);
	float b = rand(i+vec2(1.0,0.0));
	float c = rand(i+vec2(0.0,1.0));
	float d = rand(i+vec2(1.0,1.0));

	return mix(mix(a,b,coord.x),mix(c,d,coord.x),coord.y);
}

float fbm(vec2 input){
	float value = 0.0;
	float scale = 0.5;
	
	for(int i = 0; i < OCTAVE; i++){
		value += perlin(input)*scale;
		input*=2.0;
		scale*=0.5;
	}
	return value;
}

float fbmCloud(vec2 input, float minimum){
	float value = 0.0;
	float scale = 0.5;
	
	for(int i = 0; i < OCTAVE; i++){
		value += perlin(input)*scale;
		input*=2.0;
		scale*=0.5;
	}
	return smoothstep(0.,1.,(smoothstep(minimum,1.,value)-minimum)/(1.0-minimum));
}

float fbmCloud2(vec2 input, float minimum){
	float value = 0.0;
	float scale = 0.5;
	
	for(int i = 0; i < OCTAVE; i++){
		value += perlin(input)*scale;
		input*=2.0;
		scale*=0.5;
	}
	return (smoothstep(minimum,1.,value)-minimum)/(1.0-minimum);
}

void fragment(){
	vec4 originalColor = texture(TEXTURE, UV);
	float timescaled = TIME * timescale;
	//vec2 zoomUV = vec2(zoomScale * UV.x + UV.x*0.04*TIME*sin(0.07*TIME), zoomScale * UV.y + UV.y*0.05*TIME*cos(0.06*TIME));
	vec2 zoomUV2 = vec2(zoomScale * UV.x + 0.03*timescaled*sin(0.07*timescaled), zoomScale * UV.y + 0.03*timescaled*cos(0.06*timescaled));
	vec2 zoomUV3 = vec2(zoomScale * UV.x + 0.027*timescaled*sin(0.07*timescaled), zoomScale * UV.y + 0.025*timescaled*cos(0.06*timescaled));
	vec2 zoomUV4 = vec2(zoomScale * UV.x + 0.021*timescaled*sin(0.07*timescaled), zoomScale * UV.y + 0.021*timescaled*cos(0.07*timescaled));
	float tide = 0.05*sin(TIME);
	float tide2 = 0.06*cos(0.3*TIME);
	//if(color_replace == originalColor.rgb){
		vec4 nebulaTexture = vec4(SPACE.rgb, 0.5+0.2*sin(0.23*TIME +UV.x-UV.y));
		nebulaTexture += fbmCloud2(zoomUV3, 0.24 + tide)*CLOUD1_COL;
		nebulaTexture += fbmCloud(zoomUV2*0.9, 0.33 - tide)*CLOUD2_COL;
		nebulaTexture = mix(nebulaTexture,CLOUD3_COL,fbmCloud(vec2(0.9*zoomUV4.x,0.9*zoomUV4.y), 0.25+tide2));
		nebulaTexture = mix(nebulaTexture,CLOUD4_COL,fbmCloud(zoomUV3*0.7+2.0, 0.4+tide2));
		vec2 zoomstar = starscale*zoomUV2;
		vec2 pos = floor(zoomstar / size);
		float starValue = rand(pos);
		if(starValue>prob){
			vec2 center = size * pos + vec2(size, size) * 0.5;
			float t = 0.9 + 0.2 * sin(TIME * 8.0 + (starValue - prob) / (1.0 - prob) * 45.0);
			float color = 1.0 - distance(zoomstar, center) / (0.5 * size);
			nebulaTexture = mix(nebulaTexture, vec4(1.0,1.0,1.0,1.0),smoothstep(0.,1.,color * t / (abs(zoomstar.y - center.y)) * t / (abs(zoomstar.x - center.x))));
		} else {
			zoomstar *= 5.0;
			pos = floor(zoomstar / size);
			float starValue2 = rand(pos + vec2(13.0,13.0));
			if(starValue2 >= 0.95){
				vec2 center = size * pos + vec2(size, size) * 0.5;
				float t = 0.9 + 0.2 * sin(TIME * 8.0 + (starValue - prob) / (1.0 - prob) * 45.0);
				float color = 1.0 - distance(zoomstar, center) / (0.5 * size);
				nebulaTexture = mix(nebulaTexture, vec4(1.0,1.0,1.0,1.0),fbmCloud(pos,0.0)*smoothstep(0.,1.,color * t / (abs(zoomstar.y - center.y)) * t / (abs(zoomstar.x - center.x))));
			}
		}
		COLOR = vec4(nebulaTexture.rgb, 1.0);
		//COLOR = vec4(nebulaTexture.rgb,nebulaTexture.a * 1.2)
	//} else {
	//	COLOR = originalColor;
	//}
}"

[sub_resource type="ShaderMaterial" id=5]
shader = SubResource( 4 )
shader_param/OCTAVE = 12
shader_param/timescale = 0.2
shader_param/CLOUD1_COL = Color( 0.41, 0.64, 0.78, 0.4 )
shader_param/CLOUD2_COL = Color( 0.99, 0.79, 0.46, 0.2 )
shader_param/CLOUD3_COL = Color( 0.81, 0.31, 0.59, 1 )
shader_param/CLOUD4_COL = Color( 0.27, 0.15, 0.33, 1 )
shader_param/SPACE = Color( 0.09, 0.06, 0.28, 0.3 )
shader_param/zoomScale = 9.751
shader_param/size = 6.34
shader_param/starscale = 21.955
shader_param/prob = 0.98

[sub_resource type="Gradient" id=2]
colors = PoolColorArray( 0.21521, 0, 0.335938, 1, 0.109532, 0.0249045, 0.152344, 1 )

[sub_resource type="GradientTexture2D" id=3]
gradient = SubResource( 2 )
width = 1920
height = 1080
fill = 1
fill_from = Vector2( 0.5, 0.5 )

[sub_resource type="DynamicFont" id=1]
size = 250
use_mipmaps = true
use_filter = true
font_data = ExtResource( 4 )

[sub_resource type="Shader" id=6]
code = "/*
Shader from Godot Shaders - the free shader library.
godotshaders.com/shader/VHS-and-CRT-monitor-effect

This shader is under CC0 license. Feel free to use, improve and 
change this shader according to your needs and consider sharing 
the modified result to godotshaders.com.
*/

shader_type canvas_item;

//*** IMPORTANT! ***/ 
// - If you are using this shader to affect the node it is applied to set 'overlay' to false (unchecked in the instepctor).
// - If you are using this shader as an overlay, and want the shader to affect the nodes below in the Scene hierarchy,
//   set 'overlay' to true (checked in the inspector).
// On Mac there is potentially a bug causing this to not work properly. If that is the case and you want to use the shader as an overlay
// change all \"overlay ? SCREEN_TEXTURE : TEXTURE\" to only \"SCREEN_TEXTURE\" on lines 129-140, and \"vec2 uv = overlay ? warp(SCREEN_UV) : warp(UV);\"
// to \"vec2 uv = warp(SCREEN_UV);\" on line 98.
uniform bool overlay = false;

uniform float scanlines_opacity : hint_range(0.0, 1.0) = 0.4;
uniform float scanlines_width : hint_range(0.0, 0.5) = 0.25;
uniform float grille_opacity : hint_range(0.0, 1.0) = 0.3;
uniform vec2 resolution = vec2(640.0, 480.0); // Set the number of rows and columns the texture will be divided in. Scanlines and grille will make a square based on these values

uniform bool pixelate = true; // Fill each square (\"pixel\") with a sampled color, creating a pixel look and a more accurate representation of how a CRT monitor would work.

uniform bool roll = true;
uniform float roll_speed = 8.0; // Positive values are down, negative are up
uniform float roll_size : hint_range(0.0, 100.0) = 15.0;
uniform float roll_variation : hint_range(0.1, 5.0) = 1.8; // This valie is not an exact science. You have to play around with the value to find a look you like. How this works is explained in the code below.
uniform float distort_intensity : hint_range(0.0, 0.2) = 0.05; // The distortion created by the rolling effect.

uniform float noise_opacity : hint_range(0.0, 1.0) = 0.4;
uniform float noise_speed = 5.0; // There is a movement in the noise pattern that can be hard to see first. This sets the speed of that movement.

uniform float static_noise_intensity : hint_range(0.0, 1.0) = 0.06;

uniform float aberration : hint_range(-1.0, 1.0) = 0.03; // Chromatic aberration, a distortion on each color channel.
uniform float brightness = 1.4; // When adding scanline gaps and grille the image can get very dark. Brightness tries to compensate for that.
uniform bool discolor = true; // Add a discolor effect simulating a VHS

uniform float warp_amount :hint_range(0.0, 5.0) = 1.0; // Warp the texture edges simulating the curved glass of a CRT monitor or old TV.
uniform bool clip_warp = false;

uniform float vignette_intensity = 0.4; // Size of the vignette, how far towards the middle it should go.
uniform float vignette_opacity : hint_range(0.0, 1.0) = 0.5;

// Used by the noise functin to generate a pseudo random value between 0.0 and 1.0
vec2 random(vec2 uv){
    uv = vec2( dot(uv, vec2(127.1,311.7) ),
               dot(uv, vec2(269.5,183.3) ) );
    return -1.0 + 2.0 * fract(sin(uv) * 43758.5453123);
}

// Generate a Perlin noise used by the distortion effects
float noise(vec2 uv) {
    vec2 uv_index = floor(uv);
    vec2 uv_fract = fract(uv);

    vec2 blur = smoothstep(0.0, 1.0, uv_fract);

    return mix( mix( dot( random(uv_index + vec2(0.0,0.0) ), uv_fract - vec2(0.0,0.0) ),
                     dot( random(uv_index + vec2(1.0,0.0) ), uv_fract - vec2(1.0,0.0) ), blur.x),
                mix( dot( random(uv_index + vec2(0.0,1.0) ), uv_fract - vec2(0.0,1.0) ),
                     dot( random(uv_index + vec2(1.0,1.0) ), uv_fract - vec2(1.0,1.0) ), blur.x), blur.y) * 0.5 + 0.5;
}

// Takes in the UV and warps the edges, creating the spherized effect
vec2 warp(vec2 uv){
	vec2 delta = uv - 0.5;
	float delta2 = dot(delta.xy, delta.xy);
	float delta4 = delta2 * delta2;
	float delta_offset = delta4 * warp_amount;
	
	return uv + delta * delta_offset;
}

// Adds a black border to hide stretched pixel created by the warp effect
float border (vec2 uv){
	float radius = min(warp_amount, 0.08);
	radius = max(min(min(abs(radius * 2.0), abs(1.0)), abs(1.0)), 1e-5);
	vec2 abs_uv = abs(uv * 2.0 - 1.0) - vec2(1.0, 1.0) + radius;
	float dist = length(max(vec2(0.0), abs_uv)) / radius;
	float square = smoothstep(0.96, 1.0, dist);
	return clamp(1.0 - square, 0.0, 1.0);
}

// Adds a vignette shadow to the edges of the image
float vignette(vec2 uv){
	uv *= 1.0 - uv.xy;
	float vignette = uv.x * uv.y * 15.0;
	return pow(vignette, vignette_intensity * vignette_opacity);
}

void fragment()
{
	vec2 uv = overlay ? warp(SCREEN_UV) : warp(UV); // Warp the uv. uv will be used in most cases instead of UV to keep the warping
	vec2 text_uv = uv;
	vec2 roll_uv = vec2(0.0);
	float time = roll ? TIME : 0.0;
	

	// Pixelate the texture based on the given resolution.
	if (pixelate)
	{
		text_uv = ceil(uv * resolution) / resolution;
	}
	
	// Create the rolling effect. We need roll_line a bit later to make the noise effect.
	// That is why this runs if roll is true OR noise_opacity is over 0.
	float roll_line = 0.0;
	if (roll || noise_opacity > 0.0)
	{
		// Create the areas/lines where the texture will be distorted.
		roll_line = smoothstep(0.3, 0.9, sin(uv.y * roll_size - (time * roll_speed) ) );
		// Create more lines of a different size and apply to the first set of lines. This creates a bit of variation.
		roll_line *= roll_line * smoothstep(0.3, 0.9, sin(uv.y * roll_size * roll_variation - (time * roll_speed * roll_variation) ) );
		// Distort the UV where where the lines are
		roll_uv = vec2(( roll_line * distort_intensity * (1.-UV.x)), 0.0);
	}
	
	vec4 text;
	if (roll)
	{
		// If roll is true distort the texture with roll_uv. The texture is split up into RGB to 
		// make some chromatic aberration. We apply the aberration to the red and green channels accorging to the aberration parameter
		// and intensify it a bit in the roll distortion.
		text.r = texture(SCREEN_TEXTURE, text_uv + roll_uv * 0.8 + vec2(aberration, 0.0) * .1).r;
		text.g = texture(SCREEN_TEXTURE, text_uv + roll_uv * 1.2 - vec2(aberration, 0.0) * .1 ).g;
		text.b = texture(SCREEN_TEXTURE, text_uv + roll_uv).b;
		text.a = 1.0;
	}
	else
	{
		// If roll is false only apply the aberration without any distorion. The aberration values are very small so the .1 is only 
		// to make the slider in the Inspector less sensitive.
		text.r = texture(SCREEN_TEXTURE, text_uv + vec2(aberration, 0.0) * .1).r;
		text.g = texture(SCREEN_TEXTURE, text_uv - vec2(aberration, 0.0) * .1).g;
		text.b = texture(SCREEN_TEXTURE, text_uv).b;
		text.a = 1.0;
	}
	
	float r = text.r;
	float g = text.g;
	float b = text.b;
	
	uv = warp(UV);
	
	// CRT monitors don't have pixels but groups of red, green and blue dots or lines, called grille. We isolate the texture's color channels 
	// and divide it up in 3 offsetted lines to show the red, green and blue colors next to each other, with a small black gap between.
	if (grille_opacity > 0.0){
		
		float g_r = smoothstep(0.85, 0.95, abs(sin(uv.x * (resolution.x * 3.14159265))));
		r = mix(r, r * g_r, grille_opacity);
		
		float g_g = smoothstep(0.85, 0.95, abs(sin(1.05 + uv.x * (resolution.x * 3.14159265))));
		g = mix(g, g * g_g, grille_opacity);
		
		float b_b = smoothstep(0.85, 0.95, abs(sin(2.1 + uv.x * (resolution.x * 3.14159265))));
		b = mix(b, b * b_b, grille_opacity);
		
	}
	
	// Apply the grille to the texture's color channels and apply Brightness. Since the grille and the scanlines (below) make the image very dark you
	// can compensate by increasing the brightness.
	text.r = clamp(r * brightness, 0.0, 1.0);
	text.g = clamp(g * brightness, 0.0, 1.0);
	text.b = clamp(b * brightness, 0.0, 1.0);
	
	// Scanlines are the horizontal lines that make up the image on a CRT monitor. 
	// Here we are actual setting the black gap between each line, which I guess is not the right definition of the word, but you get the idea  
	float scanlines = 0.5;
	if (scanlines_opacity > 0.0)
	{
		// Same technique as above, create lines with sine and applying it to the texture. Smoothstep to allow setting the line size.
		scanlines = smoothstep(scanlines_width, scanlines_width + 0.5, abs(sin(uv.y * (resolution.y * 3.14159265))));
		text.rgb = mix(text.rgb, text.rgb * vec3(scanlines), scanlines_opacity);
	}
	
	// Apply the banded noise.
	if (noise_opacity > 0.0)
	{
		// Generate a noise pattern that is very stretched horizontally, and animate it with noise_speed
		float noise = smoothstep(0.4, 0.5, noise(uv * vec2(2.0, 200.0) + vec2(10.0, (TIME * (noise_speed))) ) );
		
		// We use roll_line (set above) to define how big the noise should be vertically (multiplying cuts off all black parts).
		// We also add in some basic noise with random() to break up the noise pattern above. The noise is sized according to 
		// the resolution value set in the inspector. If you don't like this look you can 
		// change \"ceil(uv * resolution) / resolution\" to only \"uv\" to make it less pixelated. Or multiply resolution with som value
		// greater than 1.0 to make them smaller.
		roll_line *= noise * scanlines * clamp(random((ceil(uv * resolution) / resolution) + vec2(TIME * 0.8, 0.0)).x + 0.8, 0.0, 1.0);
		// Add it to the texture based on noise_opacity
		text.rgb = clamp(mix(text.rgb, text.rgb + roll_line, noise_opacity), vec3(0.0), vec3(1.0));
	}
	
	// Apply static noise by generating it over the whole screen in the same way as above
	if (static_noise_intensity > 0.0)
	{
		text.rgb += clamp(random((ceil(uv * resolution) / resolution) + fract(TIME)).x, 0.0, 1.0) * static_noise_intensity;
	}
	
	// Apply a black border to hide imperfections caused by the warping.
	// Also apply the vignette
	text.rgb *= border(uv);
	text.rgb *= vignette(uv);
	// Hides the black border and make that area transparent. Good if you want to add the the texture on top an image of a TV or monitor.
	if (clip_warp)
	{
		text.a = border(uv);
	}
	
	// Apply discoloration to get a VHS look (lower saturation and higher contrast)
	// You can play with the values below or expose them in the Inspector.
	float saturation = 0.5;
	float contrast = 1.2;
	if (discolor)
	{
		// Saturation
		vec3 greyscale = vec3(text.r + text.g + text.b) / 3.;
		text.rgb = mix(text.rgb, greyscale, saturation);
		
		// Contrast
		float midpoint = pow(0.5, 2.2);
		text.rgb = (text.rgb - vec3(midpoint)) * contrast + midpoint;
	}
	
	COLOR = text;
}"

[sub_resource type="ShaderMaterial" id=7]
shader = SubResource( 6 )
shader_param/overlay = true
shader_param/scanlines_opacity = 0.196
shader_param/scanlines_width = 0.25
shader_param/grille_opacity = 0.069
shader_param/resolution = Vector2( 640, 480 )
shader_param/pixelate = true
shader_param/roll = false
shader_param/roll_speed = 3.406
shader_param/roll_size = 0.012
shader_param/roll_variation = 1.574
shader_param/distort_intensity = 0.024
shader_param/noise_opacity = 0.15
shader_param/noise_speed = 5.0
shader_param/static_noise_intensity = 0.037
shader_param/aberration = 0.004
shader_param/brightness = 1.4
shader_param/discolor = false
shader_param/warp_amount = 0.211
shader_param/clip_warp = false
shader_param/vignette_intensity = 0.4
shader_param/vignette_opacity = 0.191

[node name="Game" type="Node2D"]
script = ExtResource( 1 )

[node name="BG" type="ColorRect" parent="."]
material = SubResource( 5 )
margin_left = -900.0
margin_top = -572.0
margin_right = 2901.0
margin_bottom = 1566.0

[node name="TextureRect" type="TextureRect" parent="."]
margin_right = 1920.0
margin_bottom = 1080.0
texture = SubResource( 3 )
expand = true
stretch_mode = 6

[node name="Wave" type="Label" parent="."]
self_modulate = Color( 0.0784314, 0.0784314, 0.0784314, 0.356863 )
margin_left = 584.0
margin_top = 432.0
margin_right = 1248.0
margin_bottom = 640.0
grow_horizontal = 2
grow_vertical = 2
rect_pivot_offset = Vector2( 332, 104 )
custom_fonts/font = SubResource( 1 )
text = "WAVE 1"
align = 1
valign = 1
script = ExtResource( 7 )

[node name="StaticBody2D" type="StaticBody2D" parent="." groups=["Walls"]]
collision_layer = 3
collision_mask = 3
__meta__ = {
"_edit_group_": true,
"_edit_lock_": true
}

[node name="CollisionPolygon2D" type="CollisionPolygon2D" parent="StaticBody2D"]
polygon = PoolVector2Array( 13, 41, 14, 1040, 1907, 1040, 1906, 41, 13, 41, -45, -15, 1974, -29, 1975, 1111, -57, 1113, -61, -30 )

[node name="Walls" type="Sprite" parent="StaticBody2D"]
self_modulate = Color( 0.0666667, 0.0313726, 0.337255, 1 )
position = Vector2( 960, 540 )
scale = Vector2( 0.96867, 0.968671 )
texture = ExtResource( 6 )

[node name="Player" parent="." instance=ExtResource( 3 )]
position = Vector2( 960, 540 )

[node name="Camera2D" type="Camera2D" parent="."]
position = Vector2( 960, 540 )
current = true
script = ExtResource( 8 )

[node name="Objects" type="Node2D" parent="."]
__meta__ = {
"_edit_lock_": true
}

[node name="SpawnPoints" type="Node" parent="."]

[node name="Position2D17" type="Position2D" parent="SpawnPoints"]
position = Vector2( 264, 232 )
__meta__ = {
"_edit_lock_": true
}

[node name="Position2D2" type="Position2D" parent="SpawnPoints"]
position = Vector2( 1048, 208 )
__meta__ = {
"_edit_lock_": true
}

[node name="Position2D3" type="Position2D" parent="SpawnPoints"]
position = Vector2( 1448, 568 )
rotation = -1.0472
__meta__ = {
"_edit_lock_": true
}

[node name="Position2D4" type="Position2D" parent="SpawnPoints"]
position = Vector2( 1536, 816 )
rotation = -1.0472
__meta__ = {
"_edit_lock_": true
}

[node name="Position2D5" type="Position2D" parent="SpawnPoints"]
position = Vector2( 944, 696 )
rotation = -1.0472
__meta__ = {
"_edit_lock_": true
}

[node name="Position2D15" type="Position2D" parent="SpawnPoints"]
position = Vector2( 1144, 824 )
rotation = -1.0472
__meta__ = {
"_edit_lock_": true
}

[node name="Position2D6" type="Position2D" parent="SpawnPoints"]
position = Vector2( 664, 808 )
rotation = -1.0472
__meta__ = {
"_edit_lock_": true
}

[node name="Position2D7" type="Position2D" parent="SpawnPoints"]
position = Vector2( 264, 864 )
rotation = -1.0472
__meta__ = {
"_edit_lock_": true
}

[node name="Position2D8" type="Position2D" parent="SpawnPoints"]
position = Vector2( 432, 400 )
rotation = -1.0472
__meta__ = {
"_edit_lock_": true
}

[node name="Position2D9" type="Position2D" parent="SpawnPoints"]
position = Vector2( 600, 552 )
rotation = -1.0472
__meta__ = {
"_edit_lock_": true
}

[node name="Position2D10" type="Position2D" parent="SpawnPoints"]
position = Vector2( 600, 552 )
rotation = -1.0472
__meta__ = {
"_edit_lock_": true
}

[node name="Position2D16" type="Position2D" parent="SpawnPoints"]
position = Vector2( 240, 648 )
rotation = -1.0472
__meta__ = {
"_edit_lock_": true
}

[node name="Position2D11" type="Position2D" parent="SpawnPoints"]
position = Vector2( 648, 248 )
rotation = -1.0472
__meta__ = {
"_edit_lock_": true
}

[node name="Position2D12" type="Position2D" parent="SpawnPoints"]
position = Vector2( 856, 456 )
rotation = -1.0472
__meta__ = {
"_edit_lock_": true
}

[node name="Position2D13" type="Position2D" parent="SpawnPoints"]
position = Vector2( 1192, 440 )
rotation = -1.309
__meta__ = {
"_edit_lock_": true
}

[node name="Position2D14" type="Position2D" parent="SpawnPoints"]
position = Vector2( 1424, 248 )
rotation = -1.309
__meta__ = {
"_edit_lock_": true
}

[node name="Position2D18" type="Position2D" parent="SpawnPoints"]
position = Vector2( 1640, 376 )
rotation = -1.309
__meta__ = {
"_edit_lock_": true
}

[node name="SpawnPointsObject" type="Node" parent="."]

[node name="Position2D" type="Position2D" parent="SpawnPointsObject"]
position = Vector2( 464, 216 )
__meta__ = {
"_edit_lock_": true
}

[node name="Position2D2" type="Position2D" parent="SpawnPointsObject"]
position = Vector2( 216, 416 )
__meta__ = {
"_edit_lock_": true
}

[node name="Position2D3" type="Position2D" parent="SpawnPointsObject"]
position = Vector2( 256, 768 )
__meta__ = {
"_edit_lock_": true
}

[node name="Position2D4" type="Position2D" parent="SpawnPointsObject"]
position = Vector2( 496, 920 )
__meta__ = {
"_edit_lock_": true
}

[node name="Position2D5" type="Position2D" parent="SpawnPointsObject"]
position = Vector2( 512, 696 )
__meta__ = {
"_edit_lock_": true
}

[node name="Position2D6" type="Position2D" parent="SpawnPointsObject"]
position = Vector2( 768, 672 )
__meta__ = {
"_edit_lock_": true
}

[node name="Position2D7" type="Position2D" parent="SpawnPointsObject"]
position = Vector2( 904, 840 )
__meta__ = {
"_edit_lock_": true
}

[node name="Position2D8" type="Position2D" parent="SpawnPointsObject"]
position = Vector2( 1224, 936 )
__meta__ = {
"_edit_lock_": true
}

[node name="Position2D9" type="Position2D" parent="SpawnPointsObject"]
position = Vector2( 1344, 776 )
__meta__ = {
"_edit_lock_": true
}

[node name="Position2D10" type="Position2D" parent="SpawnPointsObject"]
position = Vector2( 1632, 888 )
__meta__ = {
"_edit_lock_": true
}

[node name="Position2D11" type="Position2D" parent="SpawnPointsObject"]
position = Vector2( 1688, 632 )
__meta__ = {
"_edit_lock_": true
}

[node name="Position2D12" type="Position2D" parent="SpawnPointsObject"]
position = Vector2( 1376, 448 )
__meta__ = {
"_edit_lock_": true
}

[node name="Position2D13" type="Position2D" parent="SpawnPointsObject"]
position = Vector2( 1656, 208 )
__meta__ = {
"_edit_lock_": true
}

[node name="Position2D14" type="Position2D" parent="SpawnPointsObject"]
position = Vector2( 1253, 184 )
__meta__ = {
"_edit_lock_": true
}

[node name="Position2D15" type="Position2D" parent="SpawnPointsObject"]
position = Vector2( 1120, 328 )
__meta__ = {
"_edit_lock_": true
}

[node name="Position2D16" type="Position2D" parent="SpawnPointsObject"]
position = Vector2( 856, 232 )
__meta__ = {
"_edit_lock_": true
}

[node name="Position2D17" type="Position2D" parent="SpawnPointsObject"]
position = Vector2( 672, 176 )
__meta__ = {
"_edit_lock_": true
}

[node name="Position2D18" type="Position2D" parent="SpawnPointsObject"]
position = Vector2( 184, 176 )
__meta__ = {
"_edit_lock_": true
}

[node name="Position2D19" type="Position2D" parent="SpawnPointsObject"]
position = Vector2( 176, 952 )
__meta__ = {
"_edit_lock_": true
}

[node name="SpawnPointsObjectStart" type="Node" parent="."]

[node name="Position2D6" type="Position2D" parent="SpawnPointsObjectStart"]
position = Vector2( 712, 640 )
__meta__ = {
"_edit_lock_": true
}

[node name="Position2D8" type="Position2D" parent="SpawnPointsObjectStart"]
position = Vector2( 704, 424 )
__meta__ = {
"_edit_lock_": true
}

[node name="Position2D7" type="Position2D" parent="SpawnPointsObjectStart"]
position = Vector2( 928, 792 )
__meta__ = {
"_edit_lock_": true
}

[node name="Position2D9" type="Position2D" parent="SpawnPointsObjectStart"]
position = Vector2( 1185, 672 )
__meta__ = {
"_edit_lock_": true
}

[node name="Position2D15" type="Position2D" parent="SpawnPointsObjectStart"]
position = Vector2( 1120, 328 )
__meta__ = {
"_edit_lock_": true
}

[node name="Position2D16" type="Position2D" parent="SpawnPointsObjectStart"]
position = Vector2( 848, 280 )
__meta__ = {
"_edit_lock_": true
}

[node name="SpawnManager" parent="." instance=ExtResource( 2 )]
spawn_points_container_path = NodePath("../SpawnPoints")
player_path = NodePath("../Player")
spawn_points_object_container_path = NodePath("../SpawnPointsObject")
spawn_points_object_start_container_path = NodePath("../SpawnPointsObjectStart")
objects_container_path = NodePath("../Objects")

[node name="CanvasLayer" type="CanvasLayer" parent="."]

[node name="CRT" type="ColorRect" parent="CanvasLayer"]
material = SubResource( 7 )
anchor_right = 1.0
anchor_bottom = 1.0

[node name="CanvasLayer2" type="CanvasLayer" parent="."]
follow_viewport_enable = true

[node name="Tutorial" parent="CanvasLayer2" instance=ExtResource( 5 )]
__meta__ = {
"_edit_lock_": true
}

[node name="UICanvas" type="CanvasLayer" parent="."]

[connection signal="died" from="Player" to="." method="_on_Player_died"]
[connection signal="started" from="Player" to="." method="_on_Player_started"]
[connection signal="wave_cleared" from="SpawnManager" to="." method="_on_SpawnManager_wave_cleared"]
[connection signal="tutorial_done" from="CanvasLayer2/Tutorial" to="." method="_on_Tutorial_tutorial_done"]
