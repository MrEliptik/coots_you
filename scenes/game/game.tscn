[gd_scene load_steps=21 format=2]

[ext_resource path="res://scenes/game/scripts/game.gd" type="Script" id=1]
[ext_resource path="res://scenes/spawner/spawn_manager.tscn" type="PackedScene" id=2]
[ext_resource path="res://scenes/player/player.tscn" type="PackedScene" id=3]
[ext_resource path="res://scenes/ui/fonts/aldo_the_apache/AldotheApache.ttf" type="DynamicFontData" id=4]
[ext_resource path="res://scenes/ui/tutorial/tutorial.tscn" type="PackedScene" id=5]
[ext_resource path="res://scenes/game/visuals/walls.png" type="Texture" id=6]
[ext_resource path="res://scenes/game/scripts/wave.gd" type="Script" id=7]
[ext_resource path="res://scenes/game/scripts/camera.gd" type="Script" id=8]
[ext_resource path="res://scenes/game/scripts/wave_cleared.gd" type="Script" id=9]
[ext_resource path="res://scenes/obstacle/obstacle.tscn" type="PackedScene" id=10]
[ext_resource path="res://addons/godot_sfxr/SfxrStreamPlayer.gd" type="Script" id=11]
[ext_resource path="res://scenes/ui/pause/pause.tscn" type="PackedScene" id=12]

[sub_resource type="Shader" id=4]
code = "shader_type canvas_item;

//uniform vec3 color_replace = vec3(1.0,1.0,0.0);
uniform int OCTAVE = 12;
uniform float timescale = 5.0;
uniform vec4 CLOUD1_COL: hint_color = vec4(0.41,0.64,0.78,0.4);
uniform vec4 CLOUD2_COL: hint_color = vec4(0.99,0.79,0.46,0.2);
uniform vec4 CLOUD3_COL: hint_color = vec4(0.81,0.31,0.59,1.0);
uniform vec4 CLOUD4_COL: hint_color = vec4(0.27,0.15,0.33,1.0);
uniform vec4 SPACE: hint_color = vec4(0.09,0.06,0.28,0.3);
uniform float zoomScale = 6.0;
uniform float size = 10.0;
uniform float starscale = 20.0;
uniform float prob: hint_range(0.0,1.0) = 0.98;

float rand(vec2 input){
	return fract(sin(dot(input,vec2(23.53,44.0)))*42350.45);
}

float perlin(vec2 input){
	vec2 i = floor(input);
	vec2 j = fract(input);
	vec2 coord = smoothstep(0.,1.,j);
	
	float a = rand(i);
	float b = rand(i+vec2(1.0,0.0));
	float c = rand(i+vec2(0.0,1.0));
	float d = rand(i+vec2(1.0,1.0));

	return mix(mix(a,b,coord.x),mix(c,d,coord.x),coord.y);
}

float fbm(vec2 input){
	float value = 0.0;
	float scale = 0.5;
	
	for(int i = 0; i < OCTAVE; i++){
		value += perlin(input)*scale;
		input*=2.0;
		scale*=0.5;
	}
	return value;
}

float fbmCloud(vec2 input, float minimum){
	float value = 0.0;
	float scale = 0.5;
	
	for(int i = 0; i < OCTAVE; i++){
		value += perlin(input)*scale;
		input*=2.0;
		scale*=0.5;
	}
	return smoothstep(0.,1.,(smoothstep(minimum,1.,value)-minimum)/(1.0-minimum));
}

float fbmCloud2(vec2 input, float minimum){
	float value = 0.0;
	float scale = 0.5;
	
	for(int i = 0; i < OCTAVE; i++){
		value += perlin(input)*scale;
		input*=2.0;
		scale*=0.5;
	}
	return (smoothstep(minimum,1.,value)-minimum)/(1.0-minimum);
}

void fragment(){
	vec4 originalColor = texture(TEXTURE, UV);
	float timescaled = TIME * timescale;
	//vec2 zoomUV = vec2(zoomScale * UV.x + UV.x*0.04*TIME*sin(0.07*TIME), zoomScale * UV.y + UV.y*0.05*TIME*cos(0.06*TIME));
	vec2 zoomUV2 = vec2(zoomScale * UV.x + 0.03*timescaled*sin(0.07*timescaled), zoomScale * UV.y + 0.03*timescaled*cos(0.06*timescaled));
	vec2 zoomUV3 = vec2(zoomScale * UV.x + 0.027*timescaled*sin(0.07*timescaled), zoomScale * UV.y + 0.025*timescaled*cos(0.06*timescaled));
	vec2 zoomUV4 = vec2(zoomScale * UV.x + 0.021*timescaled*sin(0.07*timescaled), zoomScale * UV.y + 0.021*timescaled*cos(0.07*timescaled));
	float tide = 0.05*sin(TIME);
	float tide2 = 0.06*cos(0.3*TIME);
	//if(color_replace == originalColor.rgb){
		vec4 nebulaTexture = vec4(SPACE.rgb, 0.5+0.2*sin(0.23*TIME +UV.x-UV.y));
		nebulaTexture += fbmCloud2(zoomUV3, 0.24 + tide)*CLOUD1_COL;
		nebulaTexture += fbmCloud(zoomUV2*0.9, 0.33 - tide)*CLOUD2_COL;
		nebulaTexture = mix(nebulaTexture,CLOUD3_COL,fbmCloud(vec2(0.9*zoomUV4.x,0.9*zoomUV4.y), 0.25+tide2));
		nebulaTexture = mix(nebulaTexture,CLOUD4_COL,fbmCloud(zoomUV3*0.7+2.0, 0.4+tide2));
		vec2 zoomstar = starscale*zoomUV2;
		vec2 pos = floor(zoomstar / size);
		float starValue = rand(pos);
		if(starValue>prob){
			vec2 center = size * pos + vec2(size, size) * 0.5;
			float t = 0.9 + 0.2 * sin(TIME * 8.0 + (starValue - prob) / (1.0 - prob) * 45.0);
			float color = 1.0 - distance(zoomstar, center) / (0.5 * size);
			nebulaTexture = mix(nebulaTexture, vec4(1.0,1.0,1.0,1.0),smoothstep(0.,1.,color * t / (abs(zoomstar.y - center.y)) * t / (abs(zoomstar.x - center.x))));
		} else {
			zoomstar *= 5.0;
			pos = floor(zoomstar / size);
			float starValue2 = rand(pos + vec2(13.0,13.0));
			if(starValue2 >= 0.95){
				vec2 center = size * pos + vec2(size, size) * 0.5;
				float t = 0.9 + 0.2 * sin(TIME * 8.0 + (starValue - prob) / (1.0 - prob) * 45.0);
				float color = 1.0 - distance(zoomstar, center) / (0.5 * size);
				nebulaTexture = mix(nebulaTexture, vec4(1.0,1.0,1.0,1.0),fbmCloud(pos,0.0)*smoothstep(0.,1.,color * t / (abs(zoomstar.y - center.y)) * t / (abs(zoomstar.x - center.x))));
			}
		}
		COLOR = vec4(nebulaTexture.rgb, 1.0);
		//COLOR = vec4(nebulaTexture.rgb,nebulaTexture.a * 1.2)
	//} else {
	//	COLOR = originalColor;
	//}
}"

[sub_resource type="ShaderMaterial" id=5]
shader = SubResource( 4 )
shader_param/OCTAVE = 12
shader_param/timescale = 0.2
shader_param/CLOUD1_COL = Color( 0.41, 0.64, 0.78, 0.4 )
shader_param/CLOUD2_COL = Color( 0.99, 0.79, 0.46, 0.2 )
shader_param/CLOUD3_COL = Color( 0.81, 0.31, 0.59, 1 )
shader_param/CLOUD4_COL = Color( 0.27, 0.15, 0.33, 1 )
shader_param/SPACE = Color( 0.09, 0.06, 0.28, 0.3 )
shader_param/zoomScale = 9.751
shader_param/size = 6.34
shader_param/starscale = 21.955
shader_param/prob = 0.98

[sub_resource type="Gradient" id=2]
colors = PoolColorArray( 0.21521, 0, 0.335938, 1, 0.109532, 0.0249045, 0.152344, 1 )

[sub_resource type="GradientTexture2D" id=3]
gradient = SubResource( 2 )
width = 1920
height = 1080
fill = 1
fill_from = Vector2( 0.5, 0.5 )

[sub_resource type="DynamicFont" id=1]
size = 250
use_mipmaps = true
use_filter = true
font_data = ExtResource( 4 )

[sub_resource type="Shader" id=6]
code = "/*
Shader from Godot Shaders - the free shader library.
godotshaders.com/shader/VHS-and-CRT-monitor-effect

This shader is under CC0 license. Feel free to use, improve and 
change this shader according to your needs and consider sharing 
the modified result to godotshaders.com.
*/

shader_type canvas_item;

//*** IMPORTANT! ***/ 
// - If you are using this shader to affect the node it is applied to set 'overlay' to false (unchecked in the instepctor).
// - If you are using this shader as an overlay, and want the shader to affect the nodes below in the Scene hierarchy,
//   set 'overlay' to true (checked in the inspector).
// On Mac there is potentially a bug causing this to not work properly. If that is the case and you want to use the shader as an overlay
// change all \"overlay ? SCREEN_TEXTURE : TEXTURE\" to only \"SCREEN_TEXTURE\" on lines 129-140, and \"vec2 uv = overlay ? warp(SCREEN_UV) : warp(UV);\"
// to \"vec2 uv = warp(SCREEN_UV);\" on line 98.
uniform bool overlay = false;

uniform float scanlines_opacity : hint_range(0.0, 1.0) = 0.4;
uniform float scanlines_width : hint_range(0.0, 0.5) = 0.25;
uniform float grille_opacity : hint_range(0.0, 1.0) = 0.3;
uniform vec2 resolution = vec2(640.0, 480.0); // Set the number of rows and columns the texture will be divided in. Scanlines and grille will make a square based on these values

uniform bool pixelate = true; // Fill each square (\"pixel\") with a sampled color, creating a pixel look and a more accurate representation of how a CRT monitor would work.

uniform bool roll = true;
uniform float roll_speed = 8.0; // Positive values are down, negative are up
uniform float roll_size : hint_range(0.0, 100.0) = 15.0;
uniform float roll_variation : hint_range(0.1, 5.0) = 1.8; // This valie is not an exact science. You have to play around with the value to find a look you like. How this works is explained in the code below.
uniform float distort_intensity : hint_range(0.0, 0.2) = 0.05; // The distortion created by the rolling effect.

uniform float noise_opacity : hint_range(0.0, 1.0) = 0.4;
uniform float noise_speed = 5.0; // There is a movement in the noise pattern that can be hard to see first. This sets the speed of that movement.

uniform float static_noise_intensity : hint_range(0.0, 1.0) = 0.06;

uniform float aberration : hint_range(-1.0, 1.0) = 0.03; // Chromatic aberration, a distortion on each color channel.
uniform float brightness = 1.4; // When adding scanline gaps and grille the image can get very dark. Brightness tries to compensate for that.
uniform bool discolor = true; // Add a discolor effect simulating a VHS

uniform float warp_amount :hint_range(0.0, 5.0) = 1.0; // Warp the texture edges simulating the curved glass of a CRT monitor or old TV.
uniform bool clip_warp = false;

uniform float vignette_intensity = 0.4; // Size of the vignette, how far towards the middle it should go.
uniform float vignette_opacity : hint_range(0.0, 1.0) = 0.5;

// Used by the noise functin to generate a pseudo random value between 0.0 and 1.0
vec2 random(vec2 uv){
    uv = vec2( dot(uv, vec2(127.1,311.7) ),
               dot(uv, vec2(269.5,183.3) ) );
    return -1.0 + 2.0 * fract(sin(uv) * 43758.5453123);
}

// Generate a Perlin noise used by the distortion effects
float noise(vec2 uv) {
    vec2 uv_index = floor(uv);
    vec2 uv_fract = fract(uv);

    vec2 blur = smoothstep(0.0, 1.0, uv_fract);

    return mix( mix( dot( random(uv_index + vec2(0.0,0.0) ), uv_fract - vec2(0.0,0.0) ),
                     dot( random(uv_index + vec2(1.0,0.0) ), uv_fract - vec2(1.0,0.0) ), blur.x),
                mix( dot( random(uv_index + vec2(0.0,1.0) ), uv_fract - vec2(0.0,1.0) ),
                     dot( random(uv_index + vec2(1.0,1.0) ), uv_fract - vec2(1.0,1.0) ), blur.x), blur.y) * 0.5 + 0.5;
}

// Takes in the UV and warps the edges, creating the spherized effect
vec2 warp(vec2 uv){
	vec2 delta = uv - 0.5;
	float delta2 = dot(delta.xy, delta.xy);
	float delta4 = delta2 * delta2;
	float delta_offset = delta4 * warp_amount;
	
	return uv + delta * delta_offset;
}

// Adds a black border to hide stretched pixel created by the warp effect
float border (vec2 uv){
	float radius = min(warp_amount, 0.08);
	radius = max(min(min(abs(radius * 2.0), abs(1.0)), abs(1.0)), 1e-5);
	vec2 abs_uv = abs(uv * 2.0 - 1.0) - vec2(1.0, 1.0) + radius;
	float dist = length(max(vec2(0.0), abs_uv)) / radius;
	float square = smoothstep(0.96, 1.0, dist);
	return clamp(1.0 - square, 0.0, 1.0);
}

// Adds a vignette shadow to the edges of the image
float vignette(vec2 uv){
	uv *= 1.0 - uv.xy;
	float vignette = uv.x * uv.y * 15.0;
	return pow(vignette, vignette_intensity * vignette_opacity);
}

void fragment()
{
	vec2 uv = overlay ? warp(SCREEN_UV) : warp(UV); // Warp the uv. uv will be used in most cases instead of UV to keep the warping
	vec2 text_uv = uv;
	vec2 roll_uv = vec2(0.0);
	float time = roll ? TIME : 0.0;
	

	// Pixelate the texture based on the given resolution.
	if (pixelate)
	{
		text_uv = ceil(uv * resolution) / resolution;
	}
	
	// Create the rolling effect. We need roll_line a bit later to make the noise effect.
	// That is why this runs if roll is true OR noise_opacity is over 0.
	float roll_line = 0.0;
	if (roll || noise_opacity > 0.0)
	{
		// Create the areas/lines where the texture will be distorted.
		roll_line = smoothstep(0.3, 0.9, sin(uv.y * roll_size - (time * roll_speed) ) );
		// Create more lines of a different size and apply to the first set of lines. This creates a bit of variation.
		roll_line *= roll_line * smoothstep(0.3, 0.9, sin(uv.y * roll_size * roll_variation - (time * roll_speed * roll_variation) ) );
		// Distort the UV where where the lines are
		roll_uv = vec2(( roll_line * distort_intensity * (1.-UV.x)), 0.0);
	}
	
	vec4 text;
	if (roll)
	{
		// If roll is true distort the texture with roll_uv. The texture is split up into RGB to 
		// make some chromatic aberration. We apply the aberration to the red and green channels accorging to the aberration parameter
		// and intensify it a bit in the roll distortion.
		text.r = texture(SCREEN_TEXTURE, text_uv + roll_uv * 0.8 + vec2(aberration, 0.0) * .1).r;
		text.g = texture(SCREEN_TEXTURE, text_uv + roll_uv * 1.2 - vec2(aberration, 0.0) * .1 ).g;
		text.b = texture(SCREEN_TEXTURE, text_uv + roll_uv).b;
		text.a = 1.0;
	}
	else
	{
		// If roll is false only apply the aberration without any distorion. The aberration values are very small so the .1 is only 
		// to make the slider in the Inspector less sensitive.
		text.r = texture(SCREEN_TEXTURE, text_uv + vec2(aberration, 0.0) * .1).r;
		text.g = texture(SCREEN_TEXTURE, text_uv - vec2(aberration, 0.0) * .1).g;
		text.b = texture(SCREEN_TEXTURE, text_uv).b;
		text.a = 1.0;
	}
	
	float r = text.r;
	float g = text.g;
	float b = text.b;
	
	uv = warp(UV);
	
	// CRT monitors don't have pixels but groups of red, green and blue dots or lines, called grille. We isolate the texture's color channels 
	// and divide it up in 3 offsetted lines to show the red, green and blue colors next to each other, with a small black gap between.
	if (grille_opacity > 0.0){
		
		float g_r = smoothstep(0.85, 0.95, abs(sin(uv.x * (resolution.x * 3.14159265))));
		r = mix(r, r * g_r, grille_opacity);
		
		float g_g = smoothstep(0.85, 0.95, abs(sin(1.05 + uv.x * (resolution.x * 3.14159265))));
		g = mix(g, g * g_g, grille_opacity);
		
		float b_b = smoothstep(0.85, 0.95, abs(sin(2.1 + uv.x * (resolution.x * 3.14159265))));
		b = mix(b, b * b_b, grille_opacity);
		
	}
	
	// Apply the grille to the texture's color channels and apply Brightness. Since the grille and the scanlines (below) make the image very dark you
	// can compensate by increasing the brightness.
	text.r = clamp(r * brightness, 0.0, 1.0);
	text.g = clamp(g * brightness, 0.0, 1.0);
	text.b = clamp(b * brightness, 0.0, 1.0);
	
	// Scanlines are the horizontal lines that make up the image on a CRT monitor. 
	// Here we are actual setting the black gap between each line, which I guess is not the right definition of the word, but you get the idea  
	float scanlines = 0.5;
	if (scanlines_opacity > 0.0)
	{
		// Same technique as above, create lines with sine and applying it to the texture. Smoothstep to allow setting the line size.
		scanlines = smoothstep(scanlines_width, scanlines_width + 0.5, abs(sin(uv.y * (resolution.y * 3.14159265))));
		text.rgb = mix(text.rgb, text.rgb * vec3(scanlines), scanlines_opacity);
	}
	
	// Apply the banded noise.
	if (noise_opacity > 0.0)
	{
		// Generate a noise pattern that is very stretched horizontally, and animate it with noise_speed
		float noise = smoothstep(0.4, 0.5, noise(uv * vec2(2.0, 200.0) + vec2(10.0, (TIME * (noise_speed))) ) );
		
		// We use roll_line (set above) to define how big the noise should be vertically (multiplying cuts off all black parts).
		// We also add in some basic noise with random() to break up the noise pattern above. The noise is sized according to 
		// the resolution value set in the inspector. If you don't like this look you can 
		// change \"ceil(uv * resolution) / resolution\" to only \"uv\" to make it less pixelated. Or multiply resolution with som value
		// greater than 1.0 to make them smaller.
		roll_line *= noise * scanlines * clamp(random((ceil(uv * resolution) / resolution) + vec2(TIME * 0.8, 0.0)).x + 0.8, 0.0, 1.0);
		// Add it to the texture based on noise_opacity
		text.rgb = clamp(mix(text.rgb, text.rgb + roll_line, noise_opacity), vec3(0.0), vec3(1.0));
	}
	
	// Apply static noise by generating it over the whole screen in the same way as above
	if (static_noise_intensity > 0.0)
	{
		text.rgb += clamp(random((ceil(uv * resolution) / resolution) + fract(TIME)).x, 0.0, 1.0) * static_noise_intensity;
	}
	
	// Apply a black border to hide imperfections caused by the warping.
	// Also apply the vignette
	text.rgb *= border(uv);
	text.rgb *= vignette(uv);
	// Hides the black border and make that area transparent. Good if you want to add the the texture on top an image of a TV or monitor.
	if (clip_warp)
	{
		text.a = border(uv);
	}
	
	// Apply discoloration to get a VHS look (lower saturation and higher contrast)
	// You can play with the values below or expose them in the Inspector.
	float saturation = 0.5;
	float contrast = 1.2;
	if (discolor)
	{
		// Saturation
		vec3 greyscale = vec3(text.r + text.g + text.b) / 3.;
		text.rgb = mix(text.rgb, greyscale, saturation);
		
		// Contrast
		float midpoint = pow(0.5, 2.2);
		text.rgb = (text.rgb - vec3(midpoint)) * contrast + midpoint;
	}
	
	COLOR = text;
}"

[sub_resource type="ShaderMaterial" id=7]
shader = SubResource( 6 )
shader_param/overlay = true
shader_param/scanlines_opacity = 0.104
shader_param/scanlines_width = 0.25
shader_param/grille_opacity = 0.036
shader_param/resolution = Vector2( 640, 480 )
shader_param/pixelate = true
shader_param/roll = false
shader_param/roll_speed = 3.406
shader_param/roll_size = 0.012
shader_param/roll_variation = 1.574
shader_param/distort_intensity = 0.024
shader_param/noise_opacity = 0.15
shader_param/noise_speed = 5.0
shader_param/static_noise_intensity = 0.037
shader_param/aberration = 0.004
shader_param/brightness = 1.4
shader_param/discolor = false
shader_param/warp_amount = 0.211
shader_param/clip_warp = false
shader_param/vignette_intensity = 0.4
shader_param/vignette_opacity = 0.191

[sub_resource type="AudioStreamSample" id=8]
data = PoolByteArray( 72, 71, 69, 68, 66, 64, 63, 61, 59, 58, 56, 55, 53, 51, 50, 48, 46, 45, 43, 41, 40, 38, 36, 35, 33, 31, 30, 28, 26, 24, 23, 21, 19, 18, 16, 14, 12, 11, 9, 7, 5, 4, 2, 255, 253, 252, 250, 248, 246, 245, 243, 241, 239, 238, 236, 234, 232, 230, 228, 227, 225, 223, 221, 219, 217, 216, 214, 212, 210, 208, 206, 205, 203, 201, 199, 197, 195, 193, 191, 189, 188, 186, 184, 72, 70, 69, 67, 65, 63, 62, 60, 58, 56, 54, 53, 51, 49, 47, 45, 44, 42, 40, 38, 36, 34, 33, 31, 29, 27, 25, 23, 21, 20, 18, 16, 14, 12, 10, 8, 6, 4, 3, 1, 254, 252, 250, 248, 246, 244, 242, 240, 238, 236, 234, 232, 230, 228, 226, 224, 222, 220, 218, 217, 214, 212, 210, 208, 206, 204, 202, 200, 198, 196, 194, 192, 190, 188, 186, 184, 72, 70, 68, 67, 65, 63, 61, 59, 57, 55, 53, 51, 49, 47, 45, 43, 41, 39, 37, 35, 33, 31, 29, 27, 25, 23, 21, 19, 17, 15, 13, 11, 9, 7, 5, 2, 255, 253, 251, 249, 247, 245, 243, 241, 239, 237, 234, 232, 230, 228, 226, 224, 222, 219, 217, 215, 213, 211, 209, 206, 204, 202, 200, 198, 195, 193, 191, 189, 187, 184, 54, 70, 68, 66, 64, 62, 60, 58, 56, 54, 52, 49, 47, 45, 43, 41, 39, 36, 34, 32, 30, 28, 26, 24, 21, 19, 17, 15, 12, 10, 8, 6, 4, 1, 254, 252, 250, 247, 245, 243, 241, 238, 236, 234, 232, 229, 227, 225, 222, 220, 218, 215, 213, 211, 208, 206, 204, 201, 199, 196, 194, 192, 190, 187, 185, 36, 70, 68, 66, 64, 61, 59, 57, 55, 52, 50, 48, 46, 43, 41, 39, 36, 34, 32, 29, 27, 25, 22, 20, 18, 15, 13, 10, 8, 6, 3, 1, 253, 251, 249, 246, 244, 241, 239, 237, 234, 232, 229, 227, 224, 222, 219, 217, 214, 212, 209, 207, 204, 202, 199, 197, 194, 192, 189, 186, 184, 72, 69, 67, 65, 62, 60, 57, 55, 52, 50, 48, 45, 43, 40, 38, 35, 33, 30, 28, 25, 23, 20, 18, 15, 13, 10, 7, 5, 2, 255, 252, 250, 247, 244, 242, 239, 237, 234, 232, 229, 226, 224, 221, 218, 216, 213, 210, 208, 205, 202, 200, 197, 194, 192, 189, 186, 220, 71, 69, 66, 64, 61, 58, 56, 53, 51, 48, 45, 43, 40, 38, 35, 32, 30, 27, 24, 22, 19, 16, 13, 11, 8, 5, 3, 255, 252, 249, 247, 244, 241, 238, 236, 233, 230, 227, 225, 222, 219, 216, 213, 210, 208, 205, 202, 199, 196, 193, 191, 188, 185, 54, 70, 67, 64, 61, 59, 56, 53, 50, 47, 45, 42, 39, 36, 34, 31, 28, 25, 22, 19, 17, 14, 11, 8, 5, 2, 254, 251, 249, 245, 243, 240, 237, 234, 231, 228, 225, 222, 219, 216, 213, 210, 207, 204, 201, 198, 195, 192, 189, 186, 1, 70, 68, 65, 62, 59, 56, 53, 50, 47, 44, 41, 38, 35, 32, 29, 26, 23, 20, 17, 14, 11, 8, 5, 2, 254, 251, 248, 245, 242, 239, 236, 233, 229, 226, 223, 220, 217, 214, 211, 207, 204, 201, 198, 195, 192, 189, 185, 36, 69, 66, 63, 60, 57, 54, 51, 48, 45, 42, 39, 35, 32, 29, 26, 23, 20, 16, 13, 10, 7, 4, 1, 252, 249, 246, 243, 239, 236, 233, 229, 226, 223, 220, 217, 213, 210, 206, 203, 200, 196, 193, 190, 187, 1, 70, 67, 64, 60, 57, 54, 51, 47, 44, 41, 38, 34, 31, 28, 24, 21, 18, 14, 11, 8, 4, 1, 252, 249, 246, 242, 239, 235, 232, 229, 225, 222, 218, 215, 211, 208, 204, 201, 197, 194, 190, 187, 238, 70, 67, 64, 60, 57, 53, 50, 47, 43, 40, 36, 33, 29, 26, 22, 19, 15, 12, 8, 5, 1, 253, 249, 245, 242, 238, 235, 231, 228, 224, 220, 217, 213, 210, 206, 202, 198, 195, 191, 187, 220, 71, 67, 64, 60, 56, 53, 49, 46, 42, 38, 35, 31, 28, 24, 20, 17, 13, 9, 6, 2, 253, 249, 246, 242, 238, 234, 231, 227, 223, 219, 215, 212, 208, 204, 200, 197, 193, 189, 185, 71, 68, 64, 60, 57, 53, 49, 45, 42, 38, 34, 30, 26, 22, 19, 15, 11, 7, 3, 254, 251, 247, 243, 239, 235, 231, 227, 223, 219, 215, 211, 207, 204, 199, 195, 192, 187, 238, 70, 66, 62, 58, 54, 50, 47, 43, 39, 35, 31, 27, 23, 19, 15, 11, 7, 3, 254, 250, 246, 241, 237, 234, 229, 225, 221, 217, 213, 209, 204, 200, 196, 192, 188, 220, 70, 66, 62, 58, 54, 50, 46, 42, 38, 34, 29, 25, 21, 17, 13, 9, 4, 255, 251, 247, 243, 238, 234, 230, 225, 221, 217, 213, 208, 204, 200, 195, 191, 187, 18, 69, 64, 60, 56, 52, 47, 43, 39, 35, 30, 26, 22, 17, 13, 9, 4, 255, 251, 246, 242, 238, 233, 229, 224, 220, 215, 211, 206, 202, 198, 193, 188, 220, 70, 66, 61, 57, 52, 48, 44, 39, 35, 30, 26, 21, 17, 13, 8, 3, 254, 249, 245, 240, 235, 231, 227, 222, 217, 213, 208, 203, 199, 194, 189, 203, 71, 66, 61, 57, 52, 48, 43, 39, 34, 29, 25, 20, 15, 11, 6, 1, 252, 247, 242, 237, 233, 228, 223, 218, 214, 209, 204, 199, 195, 189, 203, 70, 66, 61, 56, 52, 47, 42, 37, 33, 28, 23, 18, 13, 8, 4, 254, 249, 244, 239, 234, 229, 224, 220, 214, 209, 205, 200, 194, 190, 203, 70, 65, 61, 56, 51, 46, 41, 36, 31, 26, 21, 16, 11, 6, 1, 251, 246, 241, 236, 231, 226, 221, 215, 210, 205, 200, 195, 190, 203, 70, 65, 60, 55, 50, 45, 40, 35, 30, 24, 19, 14, 9, 4, 254, 249, 243, 238, 233, 227, 222, 217, 212, 206, 201, 196, 191, 203, 70, 65, 60, 54, 49, 44, 39, 33, 28, 23, 18, 12, 7, 2, 251, 246, 240, 235, 230, 224, 219, 214, 208, 202, 197, 192, 186, 71, 65, 60, 55, 49, 44, 38, 33, 27, 22, 17, 11, 5, 255, 250, 244, 238, 233, 227, 222, 216, 210, 205, 199, 193, 188, 18, 67, 62, 56, 51, 45, 39, 34, 28, 23, 17, 11, 6, 255, 249, 243, 238, 232, 226, 220, 215, 209, 203, 197, 192, 186, 71, 65, 59, 53, 48, 42, 36, 30, 25, 19, 13, 7, 1, 251, 244, 239, 233, 227, 221, 215, 209, 203, 197, 191, 203, 70, 64, 58, 52, 46, 40, 34, 28, 22, 17, 10, 4, 253, 248, 242, 235, 229, 223, 217, 211, 205, 199, 193, 187, 70, 64, 58, 52, 46, 40, 34, 28, 22, 16, 9, 3, 252, 246, 240, 234, 227, 221, 215, 208, 202, 196, 189, 1, 67, 61, 55, 49, 42, 36, 30, 24, 17, 11, 5, 253, 247, 240, 234, 228, 222, 215, 208, 202, 196, 189, 18, 66, 60, 54, 47, 41, 34, 28, 22, 15, 8, 2, 251, 244, 237, 231, 224, 218, 211, 204, 198, 191, 221, 69, 62, 55, 49, 42, 36, 29, 23, 16, 9, 2, 251, 244, 238, 231, 224, 217, 210, 204, 197, 190, 1, 67, 60, 53, 47, 40, 33, 26, 20, 13, 6, 254, 247, 241, 233, 226, 220, 213, 206, 198, 192, 221, 68, 62, 55, 48, 41, 34, 27, 20, 13, 6, 254, 247, 240, 233, 226, 219, 212, 205, 197, 190, 1, 66, 59, 52, 45, 38, 31, 24, 17, 10, 3, 250, 243, 236, 229, 221, 214, 207, 200, 192, 221, 68, 61, 54, 46, 39, 32, 25, 17, 10, 3, 250, 243, 236, 229, 221, 213, 206, 199, 191, 1, 66, 59, 51, 44, 37, 29, 22, 14, 7, 254, 246, 239, 232, 224, 217, 209, 201, 193, 204, 69, 61, 54, 46, 39, 31, 23, 16, 8, 255, 248, 240, 233, 225, 217, 209, 201, 194, 204, 69, 61, 53, 46, 38, 30, 22, 14, 7, 254, 246, 238, 230, 222, 214, 207, 199, 191, 18, 65, 57, 49, 41, 33, 25, 17, 9, 1, 248, 240, 232, 224, 216, 208, 200, 191, 1, 66, 58, 49, 41, 33, 25, 17, 9, 1, 248, 239, 231, 223, 215, 207, 198, 189, 35, 63, 55, 47, 39, 30, 22, 14, 5, 252, 244, 235, 227, 218, 210, 202, 194, 222, 67, 59, 51, 42, 34, 25, 17, 8, 255, 246, 238, 230, 220, 212, 203, 195, 205, 68, 60, 51, 43, 34, 25, 17, 8, 254, 246, 237, 228, 220, 211, 202, 193, 239, 66, 57, 49, 40, 31, 22, 13, 5, 251, 242, 233, 224, 215, 206, 198, 189, 52, 61, 53, 44, 35, 26, 17, 8, 254, 245, 236, 227, 218, 209, 199, 190, 35, 62, 53, 44, 35, 26, 17, 8, 254, 245, 235, 226, 216, 207, 198, 189, 52, 61, 52, 42, 33, 24, 15, 6, 251, 241, 232, 223, 213, 204, 195, 222, 67, 57, 48, 38, 29, 20, 10, 255, 246, 236, 227, 217, 208, 199, 188, 69, 59, 50, 40, 31, 21, 11, 2, 247, 237, 228, 218, 208, 198, 188, 69, 59, 49, 40, 30, 20, 10, 255, 246, 236, 226, 216, 206, 196, 222, 66, 56, 47, 37, 27, 16, 7, 252, 242, 232, 222, 212, 201, 191, 35, 61, 51, 41, 31, 21, 10, 255, 245, 235, 225, 215, 205, 193, 1, 63, 53, 43, 33, 23, 12, 2, 246, 236, 226, 215, 205, 195, 1, 63, 53, 43, 32, 22, 11, 1, 245, 234, 224, 213, 203, 192, 18, 62, 51, 41, 30, 19, 9, 253, 243, 232, 221, 210, 199, 189, 68, 58, 47, 36, 25, 14, 4, 248, 237, 226, 216, 205, 193, 18, 61, 51, 40, 29, 18, 7, 251, 240, 229, 218, 207, 196, 239, 64, 53, 42, 31, 20, 9, 253, 241, 230, 218, 207, 196, 239, 64, 53, 42, 30, 19, 7, 251, 240, 228, 217, 206, 195, 1, 62, 51, 40, 28, 17, 5, 249, 237, 225, 214, 202, 191, 51, 58, 46, 35, 23, 11, 255, 243, 231, 220, 208, 196, 239, 63, 52, 40, 28, 16, 5, 248, 236, 224, 212, 200, 206, 66, 54, 43, 31, 19, 7, 249, 237, 225, 213, 201, 189, 68, 56, 44, 31, 19, 7, 250, 238, 226, 214, 202, 189, 66, 54, 42, 29, 17, 5, 248, 235, 223, 210, 197, 239, 63, 51, 38, 26, 13, 1, 243, 230, 218, 205, 193, 34, 58, 46, 33, 20, 7, 250, 237, 224, 212, 199, 223, 64, 52, 39, 26, 13, 255, 243, 230, 217, 204, 191, 67, 54, 42, 29, 16, 3, 245, 232, 219, 206, 192, 51, 56, 43, 30, 17, 4, 246, 232, 219, 205, 192, 51, 56, 42, 29, 16, 3, 245, 230, 217, 203, 190, 67, 54, 40, 27, 14, 255, 241, 227, 214, 200, 223, 64, 50, 37, 23, 10, 250, 236, 223, 209, 195, 18, 58, 45, 31, 17, 3, 244, 230, 216, 203, 207, 65, 51, 38, 24, 10, 250, 236, 222, 208, 194, 34, 56, 42, 28, 14, 254, 240, 226, 212, 198, 1, 60, 46, 31, 17, 3, 243, 228, 214, 200, 240, 61, 47, 33, 18, 4, 243, 229, 214, 200, 240, 61, 47, 32, 18, 3, 243, 228, 213, 198, 1, 59, 44, 30, 15, 255, 241, 226, 210, 195, 34, 55, 40, 25, 11, 251, 236, 221, 206, 207, 65, 49, 34, 19, 4, 244, 229, 214, 199, 1, 59, 43, 28, 13, 252, 237, 222, 207, 191, 66, 51, 36, 20, 4, 244, 228, 213, 197, 18, 57, 41, 26, 10, 248, 233, 217, 201, 240, 60, 45, 29, 13, 252, 237, 221, 204, 224, 62, 46, 30, 14, 253, 237, 221, 206, 208, 64, 48, 32, 15, 254, 238, 222, 206, 208, 64, 48, 32, 15, 253, 237, 220, 204, 224, 62, 45, 29, 13, 251, 235, 218, 200, 1, 57, 41, 24, 8, 246, 229, 213, 196, 34, 53, 36, 19, 2, 241, 224, 207, 208, 64, 47, 30, 13, 251, 233, 216, 199, 17, 55, 38, 21, 4, 241, 224, 207, 208, 63, 46, 29, 11, 249, 231, 214, 197, 33, 52, 35, 18, 255, 238, 219, 201, 1, 56, 39, 21, 4, 241, 223, 206, 224, 61, 43, 25, 7, 244, 226, 208, 209, 63, 45, 27, 9, 246, 228, 211, 209, 63, 45, 26, 8, 245, 227, 209, 209, 63, 45, 26, 8, 245, 225, 207, 225, 60, 42, 23, 5, 241, 223, 205, 241, 58, 40, 20, 1, 238, 219, 200, 17, 53, 34, 16, 252, 233, 214, 195, 49, 48, 29, 10, 246, 227, 208, 225, 60, 41, 22, 3, 239, 220, 200, 33, 50, 31, 11, 247, 227, 208, 225, 60, 40, 21, 1, 237, 218, 198, 49, 47, 27, 8, 243, 223, 204, 2, 55, 35, 15, 250, 231, 211, 225, 59, 39, 19, 254, 234, 214, 194, 64, 44, 24, 4, 239, 219, 199, 48, 46, 26, 5, 240, 220, 199, 33, 49, 28, 8, 243, 222, 202, 17, 51, 30, 9, 244, 223, 202, 17, 51, 30, 9, 244, 223, 202, 17, 51, 29, 8, 242, 221, 200, 33, 48, 27, 6, 239, 218, 197, 48, 45, 24, 3, 235, 214, 210, 61, 39, 18, 251, 230, 208, 241, 55, 34, 12, 246, 224, 203, 33, 47, 25, 3, 236, 214, 210, 61, 39, 17, 250, 228, 206, 2, 52, 30, 7, 240, 218, 195, 63, 41, 18, 251, 229, 206, 2, 52, 30, 7, 240, 218, 195, 60, 37, 15, 247, 224, 201, 32, 46, 23, 255, 232, 210, 241, 54, 32, 9, 241, 216, 211, 60, 37, 13, 245, 222, 199, 48, 42, 19, 251, 228, 204, 17, 48, 25, 255, 232, 208, 2, 51, 27, 3, 234, 211, 242, 54, 30, 6, 237, 214, 226, 57, 32, 8, 239, 214, 226, 56, 32, 8, 239, 214, 226, 56, 32, 8, 239, 214, 226, 56, 31, 6, 237, 212, 242, 53, 28, 3, 234, 209, 2, 50, 25, 255, 231, 206, 17, 47, 21, 251, 225, 200, 47, 40, 14, 244, 219, 212, 59, 33, 8, 238, 213, 242, 52, 27, 2, 229, 204, 32, 42, 16, 246, 220, 212, 58, 33, 7, 236, 210, 2, 49, 23, 252, 226, 200, 61, 35, 9, 237, 211, 2, 48, 22, 250, 224, 197, 61, 35, 9, 237, 211, 2, 48, 22, 250, 221, 213, 58, 31, 4, 232, 205, 32, 41, 14, 242, 215, 242, 51, 24, 252, 225, 198, 61, 34, 5, 233, 205, 31, 40, 12, 240, 212, 2, 47, 19, 247, 219, 228, 54, 26, 254, 226, 198, 61, 32, 4, 230, 202, 46, 36, 7, 234, 206, 31, 39, 11, 238, 209, 17, 43, 14, 241, 213, 2, 46, 17, 243, 213, 2, 46, 17, 243, 213, 2, 46, 17, 243, 213, 2, 46, 17, 243, 213, 2, 46, 17, 240, 211, 17, 41, 11, 237, 207, 31, 38, 8, 233, 203, 45, 34, 4, 229, 199, 60, 30, 255, 225, 214, 56, 25, 250, 219, 243, 48, 17, 242, 211, 17, 40, 10, 234, 204, 45, 33, 2, 227, 214, 56, 25, 250, 219, 2, 43, 12, 236, 204, 45, 32, 255, 224, 229, 51, 20, 243, 212, 16, 40, 8, 232, 200, 59, 28, 251, 220, 2, 43, 10, 233, 201, 59, 26, 249, 217, 2, 43, 10, 233, 201, 59, 26, 249, 217, 2, 43, 10, 233, 201, 59, 25, 247, 214, 16, 38, 4, 226, 229, 50, 17, 239, 205, 44, 29, 251, 218, 2, 42, 9, 230, 215, 54, 21, 243, 206, 44, 28, 249, 215, 16, 37, 2, 223, 243, 45, 11, 232, 216, 54, 19, 240, 206, 44, 28, 249, 215, 16, 37, 2, 220, 2, 40, 5, 224, 244, 44, 9, 229, 230, 49, 13, 233, 216, 53, 18, 238, 202, 58, 22, 242, 207, 44, 27, 246, 211, 43, 25, 244, 208, 43, 25, 244, 208, 43, 25, 244, 208, 43, 25, 244, 208, 43, 25, 244, 208, 43, 25, 244, 208, 43, 25, 244, 204, 57, 19, 236, 217, 52, 14, 232, 231, 47, 10, 227, 244, 42, 5, 222, 3, 38, 255, 218, 16, 33, 251, 213, 30, 28, 246, 204, 56, 17, 233, 231, 46, 7, 224, 3, 37, 253, 214, 29, 27, 243, 204, 56, 17, 233, 231, 46, 7, 224, 3, 37, 253, 214, 29, 27, 240, 218, 50, 10, 225, 3, 35, 250, 210, 42, 20, 235, 231, 45, 5, 220, 16, 30, 245, 205, 55, 15, 230, 245, 40, 255, 215, 29, 25, 237, 232, 44, 3, 216, 29, 24, 237, 232, 44, 3, 216, 29, 24, 237, 232, 44, 3, 216, 29, 24, 237, 232, 44, 3, 216, 29, 24, 237, 232, 44, 255, 212, 41, 16, 228, 3, 33, 244, 220, 49, 6, 217, 28, 22, 234, 245, 38, 250, 207, 54, 11, 223, 16, 27, 239, 232, 43, 255, 212, 41, 16, 224, 16, 25, 236, 245, 37, 247, 220, 48, 3, 213, 41, 14, 224, 16, 25, 236, 245, 37, 247, 220, 48, 3, 213, 41, 14, 224, 16, 25, 236, 245, 37, 247, 233, 41, 249, 221, 47, 255, 209, 53, 6, 214, 40, 12, 220, 28, 18, 226, 15, 23, 232, 3, 29, 238, 246, 35, 244, 233, 41, 249, 221, 47, 255, 209, 53, 6, 210, 52, 3, 210, 52, 3, 210, 52, 3, 210, 52, 3, 210, 52, 3, 210, 52, 3, 210, 52, 3, 210, 52, 3, 210, 52, 3, 210, 52, 3, 210, 52, 3, 210, 52, 255, 223, 44, 249, 235, 38, 243, 246, 32, 236, 3, 25, 230, 15, 19, 224, 27, 13, 217, 39, 6, 211, 51, 255, 223, 44, 249, 235, 38, 243, 246, 32, 236, 3, 25, 230, 15, 17, 219, 38, 3, 224, 43, 245, 247, 30, 232, 15, 17, 219, 38, 3, 224, 43, 245, 247, 30, 232, 15, 17, 219, 38, 3, 224, 43, 245, 247, 30, 232, 15, 17, 219, 38, 3, 224, 43, 241, 4, 21, 221, 37, 255, 236, 35, 234, 15, 14, 214, 49, 248, 247, 28, 227, 26, 7, 225, 42, 241, 4, 21, 221, 37, 255, 236, 35, 234, 15, 14, 214, 49, 248, 247, 28, 227, 26, 7, 237, 33, 230, 26, 4, 237, 33, 230, 26, 4, 237, 33, 230, 26, 4, 237, 33, 230, 26, 4, 237, 33, 230, 26, 4, 237, 33, 230, 26, 4, 237, 33, 230, 26, 4, 237, 33, 230, 26, 4, 237, 33, 225, 36, 247, 4, 15, 227, 38, 232, 25, 255, 248, 23, 217, 46, 240, 14, 8, 238, 31, 225, 36, 247, 4, 15, 227, 38, 232, 25, 255, 248, 23, 217, 46, 240, 14, 8, 238, 31, 225, 36, 247, 4, 15, 227, 38, 227, 34, 243, 14, 4, 249, 20, 229, 36, 227, 34, 243, 14, 4, 249, 20, 229, 36, 227, 34, 243, 14, 4, 249, 20, 229, 36, 227, 34, 243, 14, 4, 249, 20, 229, 36, 227, 34, 243, 14, 4, 249, 20, 229, 36, 227, 34, 238, 24, 247, 14, 255, 4, 9, 250, 17, 240, 26, 231, 34, 221, 43, 229, 33, 238, 24, 247, 14, 255, 4, 9, 250, 17, 240, 26, 231, 34, 221, 43, 229, 33, 238, 24, 247, 14, 255, 4, 9, 250, 17, 240, 26, 230, 34, 221, 43, 223, 41, 223, 41, 223, 41, 223, 41, 223, 41, 223, 41, 223, 41, 223, 41, 223, 41, 223, 41, 223, 41, 223, 41, 223, 41, 223, 41, 223, 41, 223, 41, 223, 41, 223, 41, 223, 41, 223, 41, 223, 41, 223, 41, 223, 41, 223, 41, 223, 41, 223, 41, 223, 29, 243, 19, 251, 10, 5, 255, 13, 245, 22, 236, 30, 226, 39, 234, 29, 243, 19, 251, 10, 5, 255, 13, 245, 22, 236, 30, 226, 39, 234, 29, 243, 19, 251, 10, 5, 255, 13, 245, 22, 236, 30, 226, 39, 234, 29, 243, 19, 251, 10, 5, 255, 13, 245, 22, 236, 36, 245, 16, 5, 250, 21, 229, 36, 245, 16, 5, 250, 21, 229, 36, 245, 16, 5, 250, 21, 229, 36, 245, 16, 5, 250, 21, 229, 36, 245, 16, 5, 250, 21, 229, 36, 245, 16, 5, 250, 21, 229, 36, 245, 16, 5, 250, 21, 229, 36, 245, 16, 5, 250, 21, 229, 36, 245, 16, 5, 244, 27, 247, 11, 13, 233, 34, 254, 255, 20, 240, 22, 6, 244, 27, 247, 11, 13, 233, 34, 254, 255, 20, 240, 22, 6, 244, 27, 247, 11, 13, 233, 34, 254, 255, 20, 240, 22, 6, 244, 27, 247, 11, 13, 233, 34, 254, 255, 20, 240, 22, 6, 244, 27, 247, 11, 13, 233, 34, 254, 255, 20, 240, 22, 12, 243, 18, 12, 243, 18, 12, 243, 18, 12, 243, 18, 12, 243, 18, 12, 243, 18, 12, 243, 18, 12, 243, 18, 12, 243, 18, 12, 243, 18, 12, 243, 18, 12, 243, 18, 12, 243, 18, 12, 243, 18, 12, 243, 18, 12, 243, 18, 12, 243, 18, 12, 243, 18, 12, 243, 18, 12, 243, 18, 12, 243, 18, 12, 243, 18, 12, 243, 18, 16, 2, 242, 26, 12, 252, 255, 21, 7, 247, 13, 16, 2, 242, 26, 12, 252, 255, 21, 7, 247, 13, 16, 2, 242, 26, 12, 252, 255, 21, 7, 247, 13, 16, 2, 242, 26, 12, 252, 255, 21, 7, 247, 13, 16, 2, 242, 26, 12, 252, 255, 21, 7, 247, 13, 16, 2, 242, 26, 12, 252, 255, 21, 7, 247, 13, 16, 2, 242, 26, 12, 252, 255, 21, 7, 247, 7, 18, 11, 4, 251, 7, 18, 11, 4, 251, 7, 18, 11, 4, 251, 7, 18, 11, 4, 251, 7, 18, 11, 4, 251, 7, 18, 11, 4, 251, 7, 18, 11, 4, 251, 7, 18, 11, 4, 251, 7, 18, 11, 4, 251, 7, 18, 11, 4, 251, 7, 18, 11, 4, 251, 7, 18, 11, 4, 251, 7, 18, 11, 4, 251, 7, 18, 11, 4, 251, 7, 18, 11, 4, 251, 7, 18, 11, 4, 251, 7, 18, 11, 8, 6, 4, 2, 255, 16, 14, 12, 10, 8, 6, 4, 2, 255, 16, 14, 12, 10, 8, 6, 4, 2, 255, 16, 14, 12, 10, 8, 6, 4, 2, 255, 16, 14, 12, 10, 8, 6, 4, 2, 255, 16, 14, 12, 10, 8, 6, 4, 2, 255, 16, 14, 12, 10, 8, 6, 4, 2, 255, 16, 14, 12, 10, 8, 6, 4, 2, 255, 16, 14, 12, 10, 8, 6, 4, 2, 255, 16, 14, 12, 10, 8, 6, 4, 2, 255, 16, 14, 12, 10, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 69, 67, 66, 64, 63, 61, 59, 58, 56, 55, 53, 51, 50, 48, 47, 45, 43, 42, 40, 38, 37, 35, 33, 32, 30, 29, 27, 25, 24, 22, 20, 19, 17, 15, 14, 12, 10, 8, 7, 5, 3, 2, 255, 253, 252, 250, 248, 246, 245, 243, 241, 239, 238, 236, 234, 232, 231, 229, 227, 225, 224, 222, 220, 218, 217, 215, 213, 211, 210, 208, 206, 204, 202, 201, 199, 197, 195, 193, 191, 190, 188, 186, 237, 68, 66, 65, 63, 61, 59, 58, 56, 54, 52, 51, 49, 47, 45, 44, 42, 40, 38, 37, 35, 33, 31, 30, 28, 26, 24, 22, 21, 19, 17, 15, 13, 12, 10, 8, 6, 4, 3, 1, 254, 252, 250, 248, 246, 245, 243, 241, 239, 237, 235, 233, 231, 230, 228, 226, 224, 222, 220, 218, 216, 214, 213, 211, 209, 207, 205, 203, 201, 199, 197, 195, 193, 191, 189, 187, 220, 67, 65, 63, 62, 60, 58, 56, 54, 52, 50, 49, 47, 45, 43, 41, 39, 37, 35, 33, 32, 30, 28, 26, 24, 22, 20, 18, 16, 14, 12, 10, 8, 6, 5, 3, 1, 254, 252, 250, 248, 246, 244, 242, 240, 238, 236, 234, 232, 230, 228, 226, 224, 222, 220, 218, 216, 214, 212, 210, 207, 205, 203, 201, 199, 197, 195, 193, 191, 189, 187, 66, 64, 62, 61, 59, 57, 55, 53, 51, 49, 47, 45, 43, 41, 39, 37, 34, 32, 30, 28, 26, 24, 22, 20, 18, 16, 14, 12, 10, 8, 6, 4, 2, 254, 252, 250, 248, 246, 244, 242, 240, 238, 236, 233, 231, 229, 227, 225, 223, 220, 218, 216, 214, 212, 210, 208, 205, 203, 201, 199, 197, 194, 192, 190, 188, 66, 64, 62, 59, 57, 55, 53, 51, 49, 47, 45, 43, 40, 38, 36, 34, 32, 30, 27, 25, 23, 21, 19, 17, 14, 12, 10, 8, 6, 3, 1, 254, 252, 250, 247, 245, 243, 241, 238, 236, 234, 232, 229, 227, 225, 223, 220, 218, 216, 213, 211, 209, 206, 204, 202, 200, 197, 195, 193, 190, 221, 64, 62, 60, 58, 55, 53, 51, 49, 47, 44, 42, 40, 37, 35, 33, 31, 28, 26, 24, 22, 19, 17, 15, 12, 10, 8, 5, 3, 1, 253, 251, 249, 246, 244, 242, 239, 237, 234, 232, 230, 227, 225, 222, 220, 218, 215, 213, 211, 208, 206, 203, 201, 198, 196, 193, 191, 238, 63, 61, 59, 56, 54, 52, 49, 47, 44, 42, 40, 37, 35, 33, 30, 28, 25, 23, 20, 18, 16, 13, 11, 8, 6, 3, 1, 253, 251, 248, 246, 243, 241, 239, 236, 234, 231, 229, 226, 223, 221, 218, 216, 213, 211, 208, 206, 203, 201, 198, 196, 193, 191, 63, 61, 59, 56, 54, 51, 49, 46, 44, 41, 39, 36, 34, 31, 29, 26, 23, 21, 18, 16, 13, 11, 8, 6, 3, 255, 253, 250, 248, 245, 243, 240, 237, 235, 232, 230, 227, 224, 222, 219, 216, 214, 211, 208, 206, 203, 200, 198, 195, 192, 15, 61, 59, 56, 53, 51, 48, 46, 43, 40, 38, 35, 32, 30, 27, 25, 22, 19, 16, 14, 11, 8, 6, 3, 255, 253, 250, 247, 245, 242, 239, 236, 234, 231, 228, 226, 223, 220, 217, 214, 212, 209, 206, 203, 201, 198, 195, 192, 46, 60, 57, 54, 52, 49, 46, 43, 41, 38, 35, 32, 30, 27, 24, 21, 19, 16, 13, 10, 7, 5, 2, 254, 251, 248, 245, 243, 240, 237, 234, 231, 228, 225, 223, 220, 217, 214, 211, 208, 205, 202, 200, 196, 194, 15, 60, 57, 54, 51, 48, 46, 43, 40, 37, 34, 31, 28, 25, 23, 20, 17, 14, 11, 8, 5, 2, 254, 251, 248, 245, 243, 239, 237, 233, 231, 228, 225, 222, 219, 216, 213, 210, 207, 203, 201, 198, 194, 254, 59, 56, 54, 51, 48, 45, 42, 39, 36, 33, 30, 27, 24, 21, 18, 15, 12, 9, 6, 3, 255, 251, 248, 245, 242, 239, 236, 233, 230, 227, 224, 221, 218, 215, 211, 208, 205, 202, 199, 195, 239, 59, 56, 53, 50, 47, 44, 41, 38, 35, 31, 28, 25, 22, 19, 16, 13, 10, 6, 3, 255, 252, 249, 245, 242, 239, 236, 233, 229, 226, 223, 220, 217, 214, 210, 207, 204, 200, 197, 209, 59, 56, 53, 50, 47, 43, 40, 37, 34, 31, 27, 24, 21, 18, 14, 11, 8, 5, 1, 253, 250, 247, 243, 240, 236, 233, 230, 227, 223, 220, 217, 213, 210, 206, 203, 200, 196, 254, 58, 54, 51, 48, 44, 41, 38, 34, 31, 28, 24, 21, 18, 14, 11, 8, 4, 1, 252, 249, 246, 242, 239, 235, 232, 229, 225, 222, 218, 215, 211, 208, 204, 201, 197, 240, 57, 54, 51, 47, 44, 40, 37, 33, 30, 27, 23, 20, 16, 13, 9, 6, 2, 254, 250, 247, 243, 240, 236, 233, 229, 225, 222, 218, 215, 211, 208, 204, 201, 197, 29, 56, 52, 49, 45, 42, 38, 34, 31, 27, 24, 20, 16, 13, 9, 6, 2, 254, 250, 246, 243, 239, 235, 232, 228, 224, 221, 217, 213, 210, 206, 202, 199, 240, 56, 53, 49, 46, 42, 38, 35, 31, 27, 24, 20, 16, 12, 9, 5, 1, 253, 249, 245, 241, 237, 234, 230, 226, 222, 219, 215, 211, 207, 204, 200, 226, 56, 53, 49, 45, 41, 38, 34, 30, 26, 22, 19, 15, 11, 7, 4, 255, 251, 247, 243, 239, 235, 232, 227, 224, 220, 216, 212, 208, 204, 200, 226, 56, 52, 48, 44, 41, 37, 33, 29, 25, 21, 17, 13, 9, 5, 1, 253, 248, 245, 241, 237, 233, 229, 225, 221, 217, 213, 209, 205, 201, 226, 55, 51, 48, 44, 40, 36, 32, 28, 24, 20, 16, 11, 8, 4, 255, 250, 246, 242, 238, 234, 230, 226, 222, 218, 214, 210, 205, 201, 226, 55, 51, 47, 43, 39, 35, 31, 26, 22, 18, 14, 10, 6, 2, 253, 248, 244, 240, 236, 231, 227, 223, 219, 215, 210, 206, 202, 227, 55, 50, 46, 42, 38, 34, 30, 25, 21, 17, 13, 8, 4, 255, 251, 246, 242, 238, 234, 229, 225, 221, 216, 212, 207, 203, 199, 55, 50, 46, 42, 38, 33, 29, 25, 20, 16, 12, 7, 3, 254, 249, 245, 240, 236, 232, 227, 223, 218, 214, 210, 205, 200, 27, 52, 47, 43, 38, 34, 30, 25, 21, 16, 12, 7, 3, 254, 249, 244, 240, 236, 231, 226, 222, 217, 213, 208, 204, 214, 54, 49, 45, 40, 36, 31, 27, 22, 18, 13, 9, 4, 255, 250, 245, 241, 236, 232, 227, 222, 218, 213, 208, 204, 227, 53, 48, 44, 39, 35, 30, 25, 21, 16, 11, 7, 2, 252, 248, 243, 238, 233, 229, 224, 219, 214, 210, 205, 201, 53, 48, 44, 39, 34, 30, 25, 20, 15, 11, 6, 1, 251, 246, 242, 237, 232, 227, 222, 218, 213, 208, 203, 13, 50, 46, 41, 36, 31, 26, 22, 17, 12, 7, 2, 252, 247, 242, 237, 233, 228, 222, 218, 213, 208, 203, 26, 49, 45, 40, 35, 30, 25, 20, 15, 10, 5, 255, 250, 245, 240, 235, 230, 225, 220, 215, 210, 205, 241, 51, 46, 41, 36, 31, 26, 21, 16, 11, 6, 255, 250, 245, 240, 235, 230, 225, 220, 215, 210, 204, 13, 49, 44, 39, 34, 29, 24, 19, 13, 8, 3, 253, 248, 243, 237, 232, 227, 222, 216, 211, 206, 242, 50, 45, 40, 35, 29, 24, 19, 13, 8, 3, 253, 248, 242, 237, 231, 226, 221, 216, 210, 205, 13, 49, 43, 38, 33, 27, 22, 17, 11, 6, 255, 250, 245, 239, 234, 228, 223, 218, 212, 206, 242, 49, 44, 39, 33, 28, 22, 17, 12, 6, 255, 250, 245, 239, 234, 228, 222, 217, 211, 206, 13, 48, 42, 37, 31, 26, 20, 15, 9, 4, 253, 247, 242, 236, 231, 225, 219, 213, 208, 229, 50, 44, 38, 33, 27, 21, 16, 10, 4, 254, 248, 242, 237, 231, 225, 219, 214, 208, 229, 49, 44, 38, 32, 26, 21, 15, 9, 3, 253, 247, 241, 235, 229, 224, 218, 212, 206, 25, 46, 40, 34, 29, 23, 17, 11, 5, 254, 249, 242, 237, 231, 225, 219, 213, 207, 12, 46, 41, 35, 29, 23, 17, 11, 5, 254, 248, 242, 236, 230, 224, 218, 212, 206, 37, 45, 39, 33, 27, 20, 14, 8, 2, 251, 245, 239, 233, 227, 221, 215, 209, 242, 47, 41, 35, 29, 23, 17, 11, 4, 253, 247, 241, 235, 228, 222, 216, 210, 230, 48, 42, 35, 29, 23, 17, 11, 4, 253, 247, 240, 234, 228, 222, 215, 209, 255, 46, 40, 33, 27, 21, 14, 8, 2, 251, 244, 237, 231, 225, 219, 212, 206, 49, 42, 36, 30, 23, 17, 11, 4, 252, 246, 240, 233, 227, 221, 213, 207, 36, 43, 36, 30, 24, 17, 10, 4, 252, 246, 240, 232, 226, 219, 213, 206, 48, 42, 35, 29, 22, 15, 9, 2, 251, 244, 237, 231, 224, 217, 211, 243, 46, 39, 32, 26, 19, 12, 6, 254, 247, 240, 234, 227, 220, 214, 219, 47, 40, 34, 27, 20, 13, 6, 254, 248, 241, 234, 227, 221, 213, 219, 47, 40, 33, 26, 19, 12, 5, 254, 247, 240, 233, 226, 219, 212, 243, 45, 38, 31, 24, 17, 10, 3, 251, 244, 237, 230, 223, 216, 209, 35, 41, 34, 27, 20, 13, 6, 254, 247, 240, 233, 225, 218, 211, 12, 43, 35, 28, 21, 14, 7, 255, 247, 240, 233, 226, 219, 212, 12, 42, 35, 28, 21, 13, 6, 254, 246, 239, 232, 225, 217, 210, 23, 41, 34, 26, 19, 12, 5, 252, 245, 238, 230, 222, 215, 220, 45, 38, 31, 23, 16, 8, 1, 249, 241, 234, 226, 219, 211, 23, 40, 33, 26, 18, 11, 3, 250, 243, 235, 228, 220, 213, 255, 42, 35, 27, 19, 12, 4, 252, 244, 237, 228, 221, 213, 255, 42, 34, 27, 19, 11, 3, 251, 243, 235, 228, 220, 212, 11, 41, 33, 25, 17, 10, 2, 249, 242, 233, 225, 218, 210, 45, 37, 30, 22, 14, 6, 253, 245, 237, 230, 222, 214, 255, 41, 33, 25, 17, 9, 2, 249, 241, 233, 224, 216, 233, 43, 35, 27, 19, 11, 3, 250, 241, 233, 225, 217, 222, 44, 36, 28, 19, 11, 3, 250, 242, 234, 226, 218, 222, 43, 35, 27, 19, 11, 3, 249, 241, 233, 224, 216, 244, 41, 33, 25, 17, 8, 255, 246, 238, 230, 221, 213, 22, 38, 30, 21, 13, 4, 251, 243, 234, 226, 217, 233, 42, 34, 25, 16, 8, 255, 246, 238, 229, 221, 212, 44, 35, 27, 18, 10, 1, 248, 239, 231, 222, 213, 33, 36, 27, 19, 10, 2, 248, 240, 231, 222, 213, 33, 36, 27, 18, 10, 1, 248, 238, 229, 221, 212, 43, 34, 26, 17, 8, 255, 245, 236, 228, 219, 234, 41, 32, 23, 14, 6, 251, 242, 233, 225, 216, 11, 37, 28, 20, 11, 1, 247, 238, 229, 220, 223, 42, 33, 24, 15, 6, 251, 242, 233, 224, 215, 21, 36, 27, 18, 9, 254, 245, 236, 227, 217, 255, 38, 29, 20, 10, 1, 247, 237, 228, 219, 245, 39, 30, 20, 11, 2, 247, 238, 228, 219, 245, 39, 29, 20, 11, 1, 247, 237, 228, 218, 255, 37, 28, 18, 9, 255, 245, 236, 225, 216, 21, 35, 25, 16, 6, 252, 242, 233, 223, 224, 40, 31, 21, 12, 2, 247, 238, 228, 219, 255, 37, 27, 17, 7, 253, 243, 233, 224, 214, 41, 32, 22, 12, 2, 247, 237, 228, 218, 10, 35, 25, 15, 6, 250, 240, 231, 221, 245, 37, 27, 17, 8, 253, 243, 233, 222, 235, 38, 28, 18, 8, 253, 243, 233, 223, 225, 39, 29, 19, 9, 254, 244, 234, 224, 225, 39, 29, 19, 9, 253, 243, 233, 223, 235, 38, 28, 17, 7, 252, 242, 232, 220, 255, 35, 25, 14, 4, 249, 239, 228, 218, 20, 32, 22, 11, 1, 246, 235, 225, 226, 39, 28, 18, 7, 252, 241, 230, 220, 10, 33, 23, 12, 2, 246, 236, 225, 226, 38, 28, 17, 6, 251, 240, 229, 219, 20, 32, 21, 10, 255, 244, 232, 222, 255, 34, 23, 12, 2, 246, 235, 224, 236, 37, 26, 15, 4, 248, 237, 226, 226, 38, 27, 16, 5, 249, 238, 227, 226, 38, 27, 15, 4, 248, 237, 226, 226, 37, 26, 15, 4, 248, 237, 225, 236, 36, 25, 14, 2, 246, 235, 224, 246, 34, 23, 12, 255, 244, 233, 221, 10, 31, 20, 9, 253, 241, 230, 219, 29, 28, 17, 5, 249, 238, 226, 236, 35, 24, 12, 1, 245, 233, 222, 19, 29, 18, 6, 250, 238, 226, 237, 35, 23, 12, 255, 244, 232, 221, 28, 27, 16, 4, 247, 236, 224, 255, 32, 20, 8, 252, 240, 228, 237, 35, 23, 11, 254, 242, 230, 218, 37, 26, 14, 2, 245, 233, 221, 28, 27, 15, 3, 246, 234, 222, 19, 28, 16, 4, 247, 235, 223, 10, 29, 17, 5, 248, 236, 223, 10, 29, 17, 5, 248, 236, 224, 10, 29, 17, 4, 247, 235, 222, 19, 27, 15, 3, 245, 233, 221, 28, 26, 14, 1, 243, 230, 228, 35, 22, 10, 252, 240, 227, 246, 32, 19, 7, 249, 237, 224, 18, 27, 14, 1, 244, 231, 229, 35, 22, 9, 252, 239, 226, 255, 30, 17, 4, 246, 233, 220, 36, 23, 10, 252, 239, 227, 255, 29, 17, 4, 246, 233, 220, 34, 21, 8, 250, 237, 224, 18, 26, 13, 255, 242, 229, 247, 31, 18, 5, 247, 232, 229, 34, 20, 7, 249, 236, 222, 27, 24, 10, 252, 239, 226, 9, 27, 14, 255, 241, 228, 1, 28, 15, 1, 243, 230, 247, 30, 16, 3, 245, 231, 238, 31, 18, 4, 245, 232, 239, 31, 18, 4, 245, 232, 239, 31, 18, 4, 245, 232, 239, 31, 17, 3, 244, 230, 247, 29, 15, 1, 243, 229, 1, 27, 14, 255, 241, 227, 9, 26, 11, 252, 238, 224, 26, 22, 8, 249, 235, 231, 32, 18, 4, 245, 231, 247, 29, 15, 1, 240, 226, 17, 23, 9, 249, 235, 231, 32, 18, 3, 244, 230, 1, 26, 12, 253, 239, 224, 33, 19, 4, 245, 230, 1, 26, 12, 252, 238, 223, 33, 19, 4, 245, 230, 1, 26, 11, 252, 236, 231, 31, 16, 2, 242, 227, 17, 22, 7, 247, 233, 248, 27, 13, 253, 238, 223, 33, 18, 3, 243, 227, 17, 21, 6, 246, 231, 1, 25, 10, 250, 235, 240, 29, 14, 254, 239, 224, 32, 17, 2, 241, 226, 24, 19, 4, 243, 228, 16, 21, 5, 245, 230, 9, 23, 7, 247, 232, 1, 24, 9, 248, 232, 1, 24, 8, 248, 232, 1, 24, 8, 248, 232, 1, 24, 8, 248, 232, 1, 24, 8, 247, 231, 8, 22, 6, 245, 229, 16, 20, 4, 243, 227, 24, 18, 2, 241, 225, 31, 16, 255, 239, 233, 29, 13, 252, 236, 248, 25, 9, 248, 232, 8, 21, 5, 244, 228, 23, 17, 1, 240, 233, 29, 13, 252, 236, 1, 22, 6, 244, 228, 23, 16, 255, 238, 241, 26, 10, 249, 232, 8, 20, 4, 242, 226, 30, 14, 253, 236, 1, 22, 5, 243, 226, 30, 13, 252, 235, 1, 22, 5, 243, 227, 30, 13, 252, 235, 1, 22, 5, 243, 227, 30, 13, 250, 233, 8, 19, 2, 240, 241, 25, 8, 246, 229, 22, 15, 253, 236, 1, 21, 4, 242, 234, 27, 10, 248, 230, 22, 14, 251, 234, 8, 18, 1, 238, 249, 23, 5, 243, 235, 27, 10, 247, 230, 22, 14, 252, 234, 8, 18, 1, 237, 1, 20, 2, 239, 249, 22, 4, 241, 242, 24, 6, 244, 235, 26, 9, 246, 228, 29, 11, 248, 230, 22, 13, 250, 233, 21, 12, 249, 231, 21, 12, 249, 231, 21, 12, 249, 231, 21, 12, 249, 231, 21, 12, 249, 231, 21, 12, 249, 231, 21, 12, 249, 229, 28, 9, 245, 236, 25, 7, 243, 243, 23, 4, 241, 249, 21, 2, 239, 1, 18, 255, 236, 8, 16, 252, 234, 14, 14, 250, 230, 27, 8, 244, 243, 22, 3, 239, 1, 18, 254, 235, 14, 13, 249, 230, 27, 8, 244, 243, 22, 3, 239, 1, 18, 254, 235, 14, 13, 247, 237, 24, 5, 240, 1, 17, 252, 233, 20, 10, 245, 243, 22, 2, 238, 7, 14, 250, 231, 26, 7, 243, 250, 19, 255, 235, 14, 12, 246, 244, 21, 1, 236, 14, 11, 246, 244, 21, 1, 236, 14, 11, 246, 244, 21, 1, 236, 13, 11, 246, 244, 21, 1, 236, 13, 11, 246, 244, 21, 255, 234, 19, 8, 242, 1, 15, 250, 238, 23, 2, 237, 13, 10, 245, 250, 18, 252, 232, 25, 5, 240, 7, 13, 247, 244, 20, 255, 234, 19, 7, 240, 7, 12, 246, 250, 17, 251, 238, 22, 1, 235, 19, 6, 240, 7, 12, 246, 250, 17, 251, 238, 22, 1, 235, 19, 6, 240, 7, 12, 246, 250, 17, 251, 245, 19, 252, 239, 21, 255, 233, 24, 3, 236, 18, 5, 239, 13, 8, 241, 7, 11, 244, 1, 13, 247, 250, 16, 249, 245, 19, 252, 239, 21, 255, 233, 24, 3, 234, 23, 1, 234, 23, 1, 234, 23, 1, 234, 23, 1, 234, 23, 1, 234, 23, 1, 234, 23, 1, 234, 23, 1, 234, 23, 1, 234, 23, 1, 234, 23, 1, 234, 23, 255, 240, 20, 252, 246, 17, 249, 251, 14, 246, 1, 11, 243, 7, 8, 241, 12, 6, 238, 17, 3, 235, 23, 255, 240, 20, 252, 246, 17, 249, 251, 14, 246, 1, 11, 244, 7, 7, 239, 17, 1, 241, 19, 250, 251, 13, 245, 6, 7, 239, 17, 1, 241, 19, 250, 251, 13, 245, 6, 7, 239, 17, 1, 241, 19, 250, 251, 13, 245, 6, 7, 239, 17, 1, 241, 19, 249, 1, 9, 240, 16, 255, 247, 15, 246, 6, 6, 237, 21, 252, 251, 12, 243, 11, 3, 242, 18, 249, 1, 9, 240, 16, 255, 247, 15, 246, 6, 6, 237, 21, 252, 251, 12, 243, 11, 3, 247, 14, 244, 11, 1, 247, 14, 244, 11, 1, 247, 14, 244, 11, 1, 247, 14, 244, 11, 1, 247, 14, 244, 11, 1, 247, 14, 244, 11, 1, 247, 14, 244, 11, 1, 247, 14, 244, 11, 1, 247, 14, 242, 15, 252, 1, 6, 243, 16, 245, 10, 255, 252, 10, 239, 19, 248, 6, 3, 248, 13, 242, 15, 252, 1, 6, 243, 16, 245, 10, 255, 252, 10, 239, 19, 248, 6, 3, 248, 13, 242, 15, 252, 1, 6, 243, 16, 243, 14, 250, 6, 2, 252, 8, 244, 15, 243, 14, 250, 6, 2, 252, 8, 244, 15, 243, 14, 250, 6, 2, 252, 8, 244, 15, 243, 14, 250, 6, 2, 252, 8, 244, 15, 243, 14, 250, 6, 2, 252, 8, 244, 15, 243, 14, 248, 9, 251, 6, 255, 2, 3, 253, 7, 249, 10, 245, 14, 241, 17, 244, 13, 248, 9, 251, 6, 255, 2, 3, 253, 7, 249, 10, 245, 14, 241, 17, 245, 13, 248, 9, 251, 5, 255, 2, 3, 253, 7, 249, 10, 245, 14, 241, 17, 242, 16, 242, 16, 242, 16, 242, 16, 242, 16, 242, 16, 242, 16, 242, 16, 242, 16, 242, 16, 242, 16, 242, 16, 242, 16, 242, 16, 242, 16, 242, 16, 242, 16, 242, 16, 242, 16, 242, 16, 242, 16, 242, 16, 242, 16, 242, 16, 242, 16, 242, 16, 242, 11, 250, 7, 253, 4, 2, 255, 5, 251, 8, 247, 12, 244, 15, 247, 11, 250, 7, 254, 4, 2, 255, 5, 251, 8, 247, 12, 244, 15, 247, 11, 250, 7, 254, 4, 2, 255, 5, 251, 8, 247, 12, 244, 15, 247, 11, 250, 7, 254, 4, 2, 255, 5, 251, 8, 248, 14, 251, 6, 2, 253, 8, 245, 14, 251, 6, 2, 253, 8, 245, 14, 251, 6, 2, 253, 8, 245, 14, 251, 6, 2, 253, 8, 245, 14, 251, 6, 2, 253, 8, 245, 14, 251, 6, 2, 253, 8, 245, 13, 251, 6, 2, 253, 8, 245, 13, 251, 6, 2, 253, 8, 245, 13, 251, 6, 2, 251, 10, 252, 4, 5, 247, 12, 254, 255, 7, 249, 8, 2, 251, 10, 252, 4, 5, 247, 12, 254, 255, 7, 249, 8, 2, 251, 10, 252, 4, 5, 247, 12, 254, 255, 7, 249, 8, 2, 251, 10, 252, 4, 4, 247, 12, 254, 255, 7, 249, 8, 2, 251, 9, 252, 4, 4, 247, 12, 254, 255, 7, 249, 8, 4, 251, 6, 4, 251, 6, 4, 251, 6, 4, 251, 6, 4, 251, 6, 4, 251, 6, 4, 251, 6, 4, 251, 6, 4, 251, 6, 4, 251, 6, 4, 251, 6, 4, 251, 6, 4, 251, 6, 4, 251, 6, 4, 251, 6, 4, 251, 6, 4, 251, 6, 4, 251, 6, 4, 251, 6, 4, 251, 6, 4, 251, 6, 4, 251, 6, 4, 251, 6, 6, 1, 250, 9, 4, 254, 255, 7, 2, 252, 4, 6, 1, 250, 9, 4, 254, 255, 7, 2, 252, 4, 6, 1, 250, 9, 4, 254, 255, 7, 2, 252, 4, 6, 1, 250, 9, 4, 254, 255, 7, 2, 252, 4, 6, 1, 250, 9, 4, 254, 255, 7, 2, 252, 4, 6, 1, 251, 9, 4, 254, 255, 7, 2, 252, 4, 5, 1, 251, 9, 4, 254, 255, 7, 2, 252, 2, 6, 4, 1, 254, 2, 6, 4, 1, 254, 2, 6, 4, 1, 254, 2, 6, 4, 1, 254, 2, 6, 4, 1, 254, 2, 6, 4, 1, 254, 2, 6, 4, 1, 254, 2, 6, 4, 1, 254, 2, 6, 4, 1, 254, 2, 6, 3, 1, 254, 2, 6, 3, 1, 254, 2, 6, 3, 1, 254, 2, 6, 3, 1, 254, 2, 6, 3, 1, 254, 2, 6, 3, 1, 254, 2, 6, 3, 1, 254, 2, 6, 3, 3, 2, 1, 1, 255, 5, 4, 4, 3, 3, 2, 1, 1, 255, 5, 4, 4, 3, 3, 2, 1, 1, 255, 5, 4, 4, 3, 2, 2, 1, 1, 255, 5, 4, 4, 3, 2, 2, 1, 1, 255, 5, 4, 4, 3, 2, 2, 1, 1, 255, 5, 4, 4, 3, 2, 2, 1, 1, 255, 5, 4, 4, 3, 2, 2, 1, 1, 255, 5, 4, 4, 3, 2, 2, 1, 1, 255, 5, 4, 4, 3, 2, 2, 1, 1, 255, 5, 4, 4, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 255, 255, 255, 255, 255, 255, 255, 254, 254, 254, 254, 254, 254, 254, 253, 253, 253, 253, 253, 253, 253, 253, 252, 252, 252, 252, 252, 252, 252, 251, 251, 251, 251, 251, 251, 251, 251, 250, 250, 250, 254, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 255, 255, 255, 255, 255, 255, 255, 255, 254, 254, 254, 254, 254, 254, 254, 254, 253, 253, 253, 253, 253, 253, 253, 253, 253, 252, 252, 252, 252, 252, 252, 252, 252, 252, 251, 251, 251, 253, 5, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 255, 255, 255, 255, 255, 255, 255, 255, 255, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 252, 252, 252, 252, 252, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 253, 253, 253, 253, 253, 253, 253, 253, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 255, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 254, 255, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 )

[node name="Game" type="Node2D"]
script = ExtResource( 1 )

[node name="BG" type="ColorRect" parent="."]
material = SubResource( 5 )
margin_left = -900.0
margin_top = -572.0
margin_right = 2901.0
margin_bottom = 1566.0

[node name="TextureRect" type="TextureRect" parent="."]
margin_right = 1920.0
margin_bottom = 1080.0
texture = SubResource( 3 )
expand = true
stretch_mode = 6

[node name="Wave" type="Label" parent="."]
self_modulate = Color( 0.0784314, 0.0784314, 0.0784314, 0.356863 )
margin_left = 584.0
margin_top = 432.0
margin_right = 1248.0
margin_bottom = 640.0
grow_horizontal = 2
grow_vertical = 2
rect_pivot_offset = Vector2( 332, 104 )
custom_fonts/font = SubResource( 1 )
text = "WAVE 1"
align = 1
valign = 1
script = ExtResource( 7 )

[node name="StaticBody2D" type="StaticBody2D" parent="." groups=["Walls"]]
collision_layer = 3
collision_mask = 3
__meta__ = {
"_edit_group_": true,
"_edit_lock_": true
}

[node name="CollisionPolygon2D" type="CollisionPolygon2D" parent="StaticBody2D"]
polygon = PoolVector2Array( 13, 41, 14, 1040, 1907, 1040, 1906, 41, 13, 41, -45, -15, 1974, -29, 1975, 1111, -57, 1113, -61, -30 )

[node name="Walls" type="Sprite" parent="StaticBody2D"]
self_modulate = Color( 0.0666667, 0.0313726, 0.337255, 1 )
position = Vector2( 960, 540 )
scale = Vector2( 0.96867, 0.968671 )
texture = ExtResource( 6 )

[node name="Obstacles" type="Node2D" parent="."]
__meta__ = {
"_edit_group_": true,
"_edit_lock_": true
}

[node name="Obstacle" parent="Obstacles" instance=ExtResource( 10 )]
position = Vector2( 480, 270 )

[node name="Obstacle2" parent="Obstacles" instance=ExtResource( 10 )]
position = Vector2( 1440, 270 )

[node name="Obstacle3" parent="Obstacles" instance=ExtResource( 10 )]
position = Vector2( 480, 810 )

[node name="Obstacle4" parent="Obstacles" instance=ExtResource( 10 )]
position = Vector2( 1440, 810 )

[node name="Player" parent="." instance=ExtResource( 3 )]
position = Vector2( 960, 540 )

[node name="Camera2D" type="Camera2D" parent="."]
position = Vector2( 960, 540 )
current = true
script = ExtResource( 8 )

[node name="Objects" type="Node2D" parent="."]
__meta__ = {
"_edit_lock_": true
}

[node name="SpawnPoints" type="Node" parent="."]

[node name="Position2D17" type="Position2D" parent="SpawnPoints"]
position = Vector2( 264, 232 )
__meta__ = {
"_edit_lock_": true
}

[node name="Position2D2" type="Position2D" parent="SpawnPoints"]
position = Vector2( 1048, 208 )
__meta__ = {
"_edit_lock_": true
}

[node name="Position2D3" type="Position2D" parent="SpawnPoints"]
position = Vector2( 1448, 568 )
rotation = -1.0472
__meta__ = {
"_edit_lock_": true
}

[node name="Position2D4" type="Position2D" parent="SpawnPoints"]
position = Vector2( 1536, 816 )
rotation = -1.0472
__meta__ = {
"_edit_lock_": true
}

[node name="Position2D5" type="Position2D" parent="SpawnPoints"]
position = Vector2( 944, 696 )
rotation = -1.0472
__meta__ = {
"_edit_lock_": true
}

[node name="Position2D15" type="Position2D" parent="SpawnPoints"]
position = Vector2( 1144, 824 )
rotation = -1.0472
__meta__ = {
"_edit_lock_": true
}

[node name="Position2D6" type="Position2D" parent="SpawnPoints"]
position = Vector2( 664, 808 )
rotation = -1.0472
__meta__ = {
"_edit_lock_": true
}

[node name="Position2D7" type="Position2D" parent="SpawnPoints"]
position = Vector2( 264, 864 )
rotation = -1.0472
__meta__ = {
"_edit_lock_": true
}

[node name="Position2D8" type="Position2D" parent="SpawnPoints"]
position = Vector2( 432, 400 )
rotation = -1.0472
__meta__ = {
"_edit_lock_": true
}

[node name="Position2D9" type="Position2D" parent="SpawnPoints"]
position = Vector2( 600, 552 )
rotation = -1.0472
__meta__ = {
"_edit_lock_": true
}

[node name="Position2D10" type="Position2D" parent="SpawnPoints"]
position = Vector2( 600, 552 )
rotation = -1.0472
__meta__ = {
"_edit_lock_": true
}

[node name="Position2D16" type="Position2D" parent="SpawnPoints"]
position = Vector2( 240, 648 )
rotation = -1.0472
__meta__ = {
"_edit_lock_": true
}

[node name="Position2D11" type="Position2D" parent="SpawnPoints"]
position = Vector2( 648, 248 )
rotation = -1.0472
__meta__ = {
"_edit_lock_": true
}

[node name="Position2D12" type="Position2D" parent="SpawnPoints"]
position = Vector2( 856, 456 )
rotation = -1.0472
__meta__ = {
"_edit_lock_": true
}

[node name="Position2D13" type="Position2D" parent="SpawnPoints"]
position = Vector2( 1192, 440 )
rotation = -1.309
__meta__ = {
"_edit_lock_": true
}

[node name="Position2D14" type="Position2D" parent="SpawnPoints"]
position = Vector2( 1424, 248 )
rotation = -1.309
__meta__ = {
"_edit_lock_": true
}

[node name="Position2D18" type="Position2D" parent="SpawnPoints"]
position = Vector2( 1640, 376 )
rotation = -1.309
__meta__ = {
"_edit_lock_": true
}

[node name="SpawnPointsObject" type="Node" parent="."]

[node name="Position2D" type="Position2D" parent="SpawnPointsObject"]
position = Vector2( 464, 216 )
__meta__ = {
"_edit_lock_": true
}

[node name="Position2D2" type="Position2D" parent="SpawnPointsObject"]
position = Vector2( 216, 416 )
__meta__ = {
"_edit_lock_": true
}

[node name="Position2D3" type="Position2D" parent="SpawnPointsObject"]
position = Vector2( 256, 768 )
__meta__ = {
"_edit_lock_": true
}

[node name="Position2D4" type="Position2D" parent="SpawnPointsObject"]
position = Vector2( 496, 920 )
__meta__ = {
"_edit_lock_": true
}

[node name="Position2D5" type="Position2D" parent="SpawnPointsObject"]
position = Vector2( 512, 696 )
__meta__ = {
"_edit_lock_": true
}

[node name="Position2D6" type="Position2D" parent="SpawnPointsObject"]
position = Vector2( 768, 672 )
__meta__ = {
"_edit_lock_": true
}

[node name="Position2D7" type="Position2D" parent="SpawnPointsObject"]
position = Vector2( 904, 840 )
__meta__ = {
"_edit_lock_": true
}

[node name="Position2D8" type="Position2D" parent="SpawnPointsObject"]
position = Vector2( 1224, 936 )
__meta__ = {
"_edit_lock_": true
}

[node name="Position2D9" type="Position2D" parent="SpawnPointsObject"]
position = Vector2( 1344, 776 )
__meta__ = {
"_edit_lock_": true
}

[node name="Position2D10" type="Position2D" parent="SpawnPointsObject"]
position = Vector2( 1632, 888 )
__meta__ = {
"_edit_lock_": true
}

[node name="Position2D11" type="Position2D" parent="SpawnPointsObject"]
position = Vector2( 1688, 632 )
__meta__ = {
"_edit_lock_": true
}

[node name="Position2D12" type="Position2D" parent="SpawnPointsObject"]
position = Vector2( 1376, 448 )
__meta__ = {
"_edit_lock_": true
}

[node name="Position2D13" type="Position2D" parent="SpawnPointsObject"]
position = Vector2( 1656, 208 )
__meta__ = {
"_edit_lock_": true
}

[node name="Position2D14" type="Position2D" parent="SpawnPointsObject"]
position = Vector2( 1253, 184 )
__meta__ = {
"_edit_lock_": true
}

[node name="Position2D15" type="Position2D" parent="SpawnPointsObject"]
position = Vector2( 1120, 328 )
__meta__ = {
"_edit_lock_": true
}

[node name="Position2D16" type="Position2D" parent="SpawnPointsObject"]
position = Vector2( 856, 232 )
__meta__ = {
"_edit_lock_": true
}

[node name="Position2D17" type="Position2D" parent="SpawnPointsObject"]
position = Vector2( 672, 176 )
__meta__ = {
"_edit_lock_": true
}

[node name="Position2D18" type="Position2D" parent="SpawnPointsObject"]
position = Vector2( 184, 176 )
__meta__ = {
"_edit_lock_": true
}

[node name="Position2D19" type="Position2D" parent="SpawnPointsObject"]
position = Vector2( 176, 952 )
__meta__ = {
"_edit_lock_": true
}

[node name="SpawnPointsObjectStart" type="Node" parent="."]

[node name="Position2D6" type="Position2D" parent="SpawnPointsObjectStart"]
position = Vector2( 712, 640 )
__meta__ = {
"_edit_lock_": true
}

[node name="Position2D8" type="Position2D" parent="SpawnPointsObjectStart"]
position = Vector2( 704, 424 )
__meta__ = {
"_edit_lock_": true
}

[node name="Position2D7" type="Position2D" parent="SpawnPointsObjectStart"]
position = Vector2( 928, 792 )
__meta__ = {
"_edit_lock_": true
}

[node name="Position2D9" type="Position2D" parent="SpawnPointsObjectStart"]
position = Vector2( 1185, 672 )
__meta__ = {
"_edit_lock_": true
}

[node name="Position2D15" type="Position2D" parent="SpawnPointsObjectStart"]
position = Vector2( 1120, 328 )
__meta__ = {
"_edit_lock_": true
}

[node name="Position2D16" type="Position2D" parent="SpawnPointsObjectStart"]
position = Vector2( 848, 280 )
__meta__ = {
"_edit_lock_": true
}

[node name="SpawnManager" parent="." instance=ExtResource( 2 )]
spawn_points_container_path = NodePath("../SpawnPoints")
player_path = NodePath("../Player")
spawn_points_object_container_path = NodePath("../SpawnPointsObject")
spawn_points_object_start_container_path = NodePath("../SpawnPointsObjectStart")
objects_container_path = NodePath("../Objects")

[node name="CanvasLayer" type="CanvasLayer" parent="."]
layer = 3

[node name="CRT" type="ColorRect" parent="CanvasLayer"]
material = SubResource( 7 )
anchor_right = 1.0
anchor_bottom = 1.0

[node name="CanvasLayer2" type="CanvasLayer" parent="."]
layer = 6
follow_viewport_enable = true

[node name="Tutorial" parent="CanvasLayer2" instance=ExtResource( 5 )]
__meta__ = {
"_edit_lock_": true
}

[node name="UICanvas" type="CanvasLayer" parent="."]
layer = 9

[node name="WaveCleared" type="Label" parent="UICanvas"]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -684.5
margin_top = -104.0
margin_right = 684.5
margin_bottom = 104.0
grow_horizontal = 2
grow_vertical = 2
rect_pivot_offset = Vector2( 684, 104 )
custom_fonts/font = SubResource( 1 )
text = "WAVE CLEARED"
align = 1
valign = 1
script = ExtResource( 9 )

[node name="StageClear" type="AudioStreamPlayer" parent="UICanvas/WaveCleared"]
stream = SubResource( 8 )
script = ExtResource( 11 )
wave/type = 1
sample_params/sound_vol = 0.25
sample_params/sample_rate = 44100.0
envelope/attack_time = 0.0
envelope/sustain_time = 0.221597
envelope/punch_time = 0.0
envelope/decay_time = 0.236816
frequency/start_frequency = 0.368156
frequency/min_freq_cutoff = 0.0
frequency/slide = 0.486617
frequency/delta_slide = 0.0
vibrato/depth = 0.0
vibrato/speed = 0.0
arpeggiation/frequency_mult = 0.0
arpeggiation/change_speed = 0.0
duty_cycle/duty_cycle = 1.0
duty_cycle/sweep = 0.0
retrigger/rate = 0.500782
flanger/offset = 0.0
flanger/sweep = 0.0
low_pass_filter/cutoff_frequency = 1.0
low_pass_filter/cutoff_sweep = 0.0
low_pass_filter/resonance = 0.0
high_pass_filter/cutoff_frequency = 0.0
high_pass_filter/cutoff_sweep = 0.0

[node name="Pause" parent="UICanvas" instance=ExtResource( 12 )]

[connection signal="died" from="Player" to="." method="_on_Player_died"]
[connection signal="started" from="Player" to="." method="_on_Player_started"]
[connection signal="wave_cleared" from="SpawnManager" to="." method="_on_SpawnManager_wave_cleared"]
[connection signal="tutorial_done" from="CanvasLayer2/Tutorial" to="." method="_on_Tutorial_tutorial_done"]
